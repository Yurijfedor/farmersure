{"version":3,"file":"static/js/199.3dcc6a02.chunk.js","mappings":"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","sources":["components/adminTable/AdminTable.jsx","pages/AdminPanel.jsx","redux/selectors.js","../node_modules/reselect/es/defaultMemoize.js","../node_modules/reselect/es/index.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { doc, updateDoc } from \"firebase/firestore\";\r\n\r\nimport db from \"../../firebase\";\r\n\r\nimport { selectTasksUnderReview, selectHives } from \"../../redux/selectors\";\r\nimport { updateTaskStatusAsync } from \"../../redux/operations\";\r\nimport { getUserProfile } from \"../../services/user\";\r\n\r\nexport const AdminTable = () => {\r\n  const tasksUnderReview = useSelector(selectTasksUnderReview); // Завдання\r\n  const hives = useSelector(selectHives); // Всі вулики зі стану Redux\r\n  const dispatch = useDispatch();\r\n\r\n  const [statusUpdate, setStatusUpdate] = useState({});\r\n  const [newNotes, setNewNotes] = useState(\"\");\r\n\r\n  const handleStatusChange = async (\r\n    taskId,\r\n    hive,\r\n    property,\r\n    newValue,\r\n    taskCost\r\n  ) => {\r\n    if (!newValue) {\r\n      console.error(\"Invalid status selected\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const lesseeId = hive?.lessee.uid;\r\n      if (!lesseeId) {\r\n        console.error(\"Властивість 'lessee' не знайдена у вулику.\");\r\n        return;\r\n      }\r\n\r\n      // Якщо статус змінюється на \"Done\", виконуємо перевірку балансу та списуємо кошти\r\n      if (newValue === \"Done\") {\r\n        const userProfile = await getUserProfile(lesseeId);\r\n        if (!userProfile || typeof userProfile.balance !== \"number\") {\r\n          console.error(\r\n            \"Профіль користувача не знайдено або баланс не вказано.\"\r\n          );\r\n          return;\r\n        }\r\n\r\n        const updatedBalance = userProfile.balance - taskCost;\r\n        if (updatedBalance < 0) {\r\n          alert(\r\n            \"Недостатньо коштів на балансі користувача для завершення завдання.\"\r\n          );\r\n          return;\r\n        }\r\n\r\n        const userRef = doc(db, \"users\", lesseeId);\r\n        await updateDoc(userRef, { balance: updatedBalance });\r\n        console.log(\"Баланс користувача оновлено.\");\r\n      }\r\n\r\n      // Оновлюємо статус завдання незалежно від його нового значення\r\n      dispatch(\r\n        updateTaskStatusAsync({ hiveId: hive.id, taskId, property, newValue })\r\n      );\r\n    } catch (error) {\r\n      console.error(\r\n        \"Помилка при оновленні балансу або статусу завдання:\",\r\n        error.message\r\n      );\r\n    }\r\n  };\r\n\r\n  const handleNotesArea = (e) => {\r\n    setNewNotes(e.target.value === \"\" ? \" \" : e.target.value);\r\n  };\r\n\r\n  // Створюємо мапу вуликів для швидкого доступу\r\n  const hiveMap = hives.reduce((acc, hive) => {\r\n    acc[hive.id] = hive;\r\n    return acc;\r\n  }, {});\r\n\r\n  return (\r\n    <table>\r\n      <thead>\r\n        <tr>\r\n          <th>Hive ID</th>\r\n          <th>Task Name</th>\r\n          <th>Planned Date</th>\r\n          <th>Executor</th>\r\n          <th>Duration (min)</th>\r\n          <th>Cost ($)</th>\r\n          <th>Notes</th>\r\n          <th>Status</th>\r\n          <th>Change Status</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {tasksUnderReview.map((task) => {\r\n          const hive = hiveMap[task.hiveId]; // Знаходимо вулик за його ID\r\n\r\n          return (\r\n            <tr key={task.id}>\r\n              <td>{task.hiveId}</td>\r\n              <td>{task.name}</td>\r\n              <td>{task.plannedDate ? task.plannedDate : \"Not set\"}</td>\r\n              <td>{task.executor}</td>\r\n              <td>{task.duration}</td>\r\n              <td>{task.cost}</td>\r\n              <td>\r\n                <textarea\r\n                  value={newNotes === \"\" ? task.notes : newNotes}\r\n                  onChange={handleNotesArea}\r\n                  onBlur={(e) =>\r\n                    handleStatusChange(task.id, hive, \"notes\", e.target.value)\r\n                  }\r\n                />\r\n              </td>\r\n              <td>{statusUpdate[task.id] || task.status}</td>\r\n              <td>\r\n                <select\r\n                  value={statusUpdate[task.id] || task.status}\r\n                  onChange={(e) =>\r\n                    handleStatusChange(\r\n                      task.id,\r\n                      hive,\r\n                      \"status\",\r\n                      e.target.value,\r\n                      task.cost\r\n                    )\r\n                  }\r\n                >\r\n                  <option value=\"Under Review\">Under Review</option>\r\n                  <option value=\"Approved\">Approved</option>\r\n                  <option value=\"Canceled\">Canceled</option>\r\n                  <option value=\"Done\">Done</option>\r\n                </select>\r\n              </td>\r\n            </tr>\r\n          );\r\n        })}\r\n      </tbody>\r\n    </table>\r\n  );\r\n};\r\n","import { useAuth } from \"../hooks/useAuth\";\r\n\r\nimport { AdminTable } from \"../components/adminTable/AdminTable\";\r\n\r\nconst AdminPanel = () => {\r\n  const { isAdmin } = useAuth();\r\n  return isAdmin ? <AdminTable /> : <h3>You must be the Admin</h3>;\r\n};\r\n\r\nexport default AdminPanel;\r\n","import { createSelector } from \"@reduxjs/toolkit\";\r\n\r\nexport const selectHives = (state) => state.hives.hives;\r\nexport const selectIsLoading = (state) => state.hives.isLoading;\r\nexport const selectError = (state) => state.hives.error;\r\nexport const selectUserProfile = (state) => state.user.profile;\r\nexport const selectIsProfileLoading = (state) => state.user.isLoading;\r\nexport const selectProfileError = (state) => state.user.error;\r\n\r\nexport const selectAllTasks = createSelector(\r\n  [selectHives], // Отримуємо всі вулики з state\r\n  (hives) => {\r\n    return hives.flatMap((hive) => hive.tasks); // Об'єднуємо всі tasks з усіх вуликів\r\n  }\r\n);\r\n\r\nexport const selectTasksUnderReview = createSelector(\r\n  [selectHives], // Отримуємо всі вулики з state\r\n  (hives) => {\r\n    return hives\r\n      .flatMap((hive) => hive.tasks) // Об'єднуємо всі tasks з усіх вуликів\r\n      .filter((task) => task.status === \"Under Review\"); // Фільтруємо по статусу\r\n  }\r\n);\r\n\r\nexport const selectTasksByStatus = createSelector(\r\n  [selectHives, (_, hiveId, status) => ({ hiveId, status })],\r\n  (hives, { hiveId, status }) => {\r\n    const hive = hives.find((hive) => hive.id === hiveId);\r\n    return hive && hive.tasks\r\n      ? hive.tasks.filter((task) => task.status === status)\r\n      : [];\r\n  }\r\n);\r\n\r\nexport const selectHiveById = createSelector(\r\n  [selectHives, (_, hiveId) => hiveId], // Передаємо hiveId\r\n  (hives, hiveId) => {\r\n    return hives.find((hive) => hive.id === hiveId) || null; // Повертаємо вулик або null, якщо не знайдено\r\n  }\r\n);\r\n\r\n// Новий селектор для підсумовування вартості завдань\r\nexport const selectPlannedTasksCost = createSelector(\r\n  [selectHives, selectUserProfile], // Отримуємо вулики та профіль користувача\r\n  (hives, userProfile) => {\r\n    if (!userProfile) return 0;\r\n\r\n    const userId = userProfile.id;\r\n\r\n    // Фільтруємо вулики, які орендує поточний користувач\r\n    const userHives = hives.filter((hive) => hive.lessee.uid === userId);\r\n\r\n    // Збираємо всі завдання зі статусами \"Under Review\" і \"Approved\"\r\n    const plannedTasks = userHives.flatMap((hive) =>\r\n      hive.tasks.filter(\r\n        (task) => task.status === \"Under Review\" || task.status === \"Approved\"\r\n      )\r\n    );\r\n\r\n    // Підсумовуємо їхню вартість\r\n    const result = plannedTasks.reduce((total, task) => total + task.cost, 0);\r\n\r\n    return result;\r\n  }\r\n);\r\n\r\nexport const selectHivesByLessee = createSelector(\r\n  [selectHives, (_, uid) => uid], // Отримуємо всі вулики та uid як аргумент\r\n  (hives, uid) => {\r\n    return hives.filter((hive) => hive.lessee?.uid === uid); // Фільтруємо вулики за uid орендаря\r\n  }\r\n);\r\n","// Cache implementation based on Erik Rasmussen's `lru-memoize`:\n// https://github.com/erikras/lru-memoize\nvar NOT_FOUND = 'NOT_FOUND';\n\nfunction createSingletonCache(equals) {\n  var entry;\n  return {\n    get: function get(key) {\n      if (entry && equals(entry.key, key)) {\n        return entry.value;\n      }\n\n      return NOT_FOUND;\n    },\n    put: function put(key, value) {\n      entry = {\n        key: key,\n        value: value\n      };\n    },\n    getEntries: function getEntries() {\n      return entry ? [entry] : [];\n    },\n    clear: function clear() {\n      entry = undefined;\n    }\n  };\n}\n\nfunction createLruCache(maxSize, equals) {\n  var entries = [];\n\n  function get(key) {\n    var cacheIndex = entries.findIndex(function (entry) {\n      return equals(key, entry.key);\n    }); // We found a cached entry\n\n    if (cacheIndex > -1) {\n      var entry = entries[cacheIndex]; // Cached entry not at top of cache, move it to the top\n\n      if (cacheIndex > 0) {\n        entries.splice(cacheIndex, 1);\n        entries.unshift(entry);\n      }\n\n      return entry.value;\n    } // No entry found in cache, return sentinel\n\n\n    return NOT_FOUND;\n  }\n\n  function put(key, value) {\n    if (get(key) === NOT_FOUND) {\n      // TODO Is unshift slow?\n      entries.unshift({\n        key: key,\n        value: value\n      });\n\n      if (entries.length > maxSize) {\n        entries.pop();\n      }\n    }\n  }\n\n  function getEntries() {\n    return entries;\n  }\n\n  function clear() {\n    entries = [];\n  }\n\n  return {\n    get: get,\n    put: put,\n    getEntries: getEntries,\n    clear: clear\n  };\n}\n\nexport var defaultEqualityCheck = function defaultEqualityCheck(a, b) {\n  return a === b;\n};\nexport function createCacheKeyComparator(equalityCheck) {\n  return function areArgumentsShallowlyEqual(prev, next) {\n    if (prev === null || next === null || prev.length !== next.length) {\n      return false;\n    } // Do this in a for loop (and not a `forEach` or an `every`) so we can determine equality as fast as possible.\n\n\n    var length = prev.length;\n\n    for (var i = 0; i < length; i++) {\n      if (!equalityCheck(prev[i], next[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n}\n// defaultMemoize now supports a configurable cache size with LRU behavior,\n// and optional comparison of the result value with existing values\nexport function defaultMemoize(func, equalityCheckOrOptions) {\n  var providedOptions = typeof equalityCheckOrOptions === 'object' ? equalityCheckOrOptions : {\n    equalityCheck: equalityCheckOrOptions\n  };\n  var _providedOptions$equa = providedOptions.equalityCheck,\n      equalityCheck = _providedOptions$equa === void 0 ? defaultEqualityCheck : _providedOptions$equa,\n      _providedOptions$maxS = providedOptions.maxSize,\n      maxSize = _providedOptions$maxS === void 0 ? 1 : _providedOptions$maxS,\n      resultEqualityCheck = providedOptions.resultEqualityCheck;\n  var comparator = createCacheKeyComparator(equalityCheck);\n  var cache = maxSize === 1 ? createSingletonCache(comparator) : createLruCache(maxSize, comparator); // we reference arguments instead of spreading them for performance reasons\n\n  function memoized() {\n    var value = cache.get(arguments);\n\n    if (value === NOT_FOUND) {\n      // @ts-ignore\n      value = func.apply(null, arguments);\n\n      if (resultEqualityCheck) {\n        var entries = cache.getEntries();\n        var matchingEntry = entries.find(function (entry) {\n          return resultEqualityCheck(entry.value, value);\n        });\n\n        if (matchingEntry) {\n          value = matchingEntry.value;\n        }\n      }\n\n      cache.put(arguments, value);\n    }\n\n    return value;\n  }\n\n  memoized.clearCache = function () {\n    return cache.clear();\n  };\n\n  return memoized;\n}","import { defaultMemoize, defaultEqualityCheck } from './defaultMemoize';\nexport { defaultMemoize, defaultEqualityCheck };\n\nfunction getDependencies(funcs) {\n  var dependencies = Array.isArray(funcs[0]) ? funcs[0] : funcs;\n\n  if (!dependencies.every(function (dep) {\n    return typeof dep === 'function';\n  })) {\n    var dependencyTypes = dependencies.map(function (dep) {\n      return typeof dep === 'function' ? \"function \" + (dep.name || 'unnamed') + \"()\" : typeof dep;\n    }).join(', ');\n    throw new Error(\"createSelector expects all input-selectors to be functions, but received the following types: [\" + dependencyTypes + \"]\");\n  }\n\n  return dependencies;\n}\n\nexport function createSelectorCreator(memoize) {\n  for (var _len = arguments.length, memoizeOptionsFromArgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    memoizeOptionsFromArgs[_key - 1] = arguments[_key];\n  }\n\n  var createSelector = function createSelector() {\n    for (var _len2 = arguments.length, funcs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      funcs[_key2] = arguments[_key2];\n    }\n\n    var _recomputations = 0;\n\n    var _lastResult; // Due to the intricacies of rest params, we can't do an optional arg after `...funcs`.\n    // So, start by declaring the default value here.\n    // (And yes, the words 'memoize' and 'options' appear too many times in this next sequence.)\n\n\n    var directlyPassedOptions = {\n      memoizeOptions: undefined\n    }; // Normally, the result func or \"output selector\" is the last arg\n\n    var resultFunc = funcs.pop(); // If the result func is actually an _object_, assume it's our options object\n\n    if (typeof resultFunc === 'object') {\n      directlyPassedOptions = resultFunc; // and pop the real result func off\n\n      resultFunc = funcs.pop();\n    }\n\n    if (typeof resultFunc !== 'function') {\n      throw new Error(\"createSelector expects an output function after the inputs, but received: [\" + typeof resultFunc + \"]\");\n    } // Determine which set of options we're using. Prefer options passed directly,\n    // but fall back to options given to createSelectorCreator.\n\n\n    var _directlyPassedOption = directlyPassedOptions,\n        _directlyPassedOption2 = _directlyPassedOption.memoizeOptions,\n        memoizeOptions = _directlyPassedOption2 === void 0 ? memoizeOptionsFromArgs : _directlyPassedOption2; // Simplifying assumption: it's unlikely that the first options arg of the provided memoizer\n    // is an array. In most libs I've looked at, it's an equality function or options object.\n    // Based on that, if `memoizeOptions` _is_ an array, we assume it's a full\n    // user-provided array of options. Otherwise, it must be just the _first_ arg, and so\n    // we wrap it in an array so we can apply it.\n\n    var finalMemoizeOptions = Array.isArray(memoizeOptions) ? memoizeOptions : [memoizeOptions];\n    var dependencies = getDependencies(funcs);\n    var memoizedResultFunc = memoize.apply(void 0, [function recomputationWrapper() {\n      _recomputations++; // apply arguments instead of spreading for performance.\n\n      return resultFunc.apply(null, arguments);\n    }].concat(finalMemoizeOptions)); // If a selector is called with the exact same arguments we don't need to traverse our dependencies again.\n\n    var selector = memoize(function dependenciesChecker() {\n      var params = [];\n      var length = dependencies.length;\n\n      for (var i = 0; i < length; i++) {\n        // apply arguments instead of spreading and mutate a local list of params for performance.\n        // @ts-ignore\n        params.push(dependencies[i].apply(null, arguments));\n      } // apply arguments instead of spreading for performance.\n\n\n      _lastResult = memoizedResultFunc.apply(null, params);\n      return _lastResult;\n    });\n    Object.assign(selector, {\n      resultFunc: resultFunc,\n      memoizedResultFunc: memoizedResultFunc,\n      dependencies: dependencies,\n      lastResult: function lastResult() {\n        return _lastResult;\n      },\n      recomputations: function recomputations() {\n        return _recomputations;\n      },\n      resetRecomputations: function resetRecomputations() {\n        return _recomputations = 0;\n      }\n    });\n    return selector;\n  }; // @ts-ignore\n\n\n  return createSelector;\n}\nexport var createSelector = /* #__PURE__ */createSelectorCreator(defaultMemoize);\n// Manual definition of state and output arguments\nexport var createStructuredSelector = function createStructuredSelector(selectors, selectorCreator) {\n  if (selectorCreator === void 0) {\n    selectorCreator = createSelector;\n  }\n\n  if (typeof selectors !== 'object') {\n    throw new Error('createStructuredSelector expects first argument to be an object ' + (\"where each property is a selector, instead received a \" + typeof selectors));\n  }\n\n  var objectKeys = Object.keys(selectors);\n  var resultSelector = selectorCreator( // @ts-ignore\n  objectKeys.map(function (key) {\n    return selectors[key];\n  }), function () {\n    for (var _len3 = arguments.length, values = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      values[_key3] = arguments[_key3];\n    }\n\n    return values.reduce(function (composition, value, index) {\n      composition[objectKeys[index]] = value;\n      return composition;\n    }, {});\n  });\n  return resultSelector;\n};"],"names":["AdminTable","tasksUnderReview","useSelector","selectTasksUnderReview","hives","selectHives","dispatch","useDispatch","_useState","useState","_useState2","_slicedToArray","statusUpdate","_useState3","_useState4","newNotes","setNewNotes","handleStatusChange","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","taskId","hive","property","newValue","taskCost","lesseeId","userProfile","updatedBalance","userRef","wrap","_context","prev","next","console","error","abrupt","lessee","uid","getUserProfile","sent","balance","alert","doc","db","updateDoc","log","updateTaskStatusAsync","hiveId","id","t0","message","stop","_x","_x2","_x3","_x4","_x5","apply","arguments","handleNotesArea","e","target","value","hiveMap","reduce","acc","_jsxs","children","_jsx","map","task","name","plannedDate","executor","duration","cost","notes","onChange","onBlur","status","useAuth","isAdmin","state","selectIsLoading","isLoading","selectError","selectUserProfile","user","profile","selectIsProfileLoading","selectProfileError","createSelector","flatMap","tasks","filter","selectTasksByStatus","_","find","selectHiveById","selectPlannedTasksCost","userId","total","selectHivesByLessee","_hive$lessee","NOT_FOUND","defaultEqualityCheck","a","b","defaultMemoize","func","equalityCheckOrOptions","providedOptions","equalityCheck","_providedOptions$equa","_providedOptions$maxS","maxSize","resultEqualityCheck","comparator","length","i","createCacheKeyComparator","cache","equals","entry","get","key","put","getEntries","clear","undefined","createSingletonCache","entries","cacheIndex","findIndex","splice","unshift","pop","createLruCache","memoized","matchingEntry","clearCache","createSelectorCreator","memoize","_len","memoizeOptionsFromArgs","Array","_key","_len2","funcs","_key2","_lastResult","_recomputations","directlyPassedOptions","memoizeOptions","resultFunc","Error","_directlyPassedOption2","finalMemoizeOptions","isArray","dependencies","every","dep","dependencyTypes","join","getDependencies","memoizedResultFunc","concat","selector","params","push","Object","assign","lastResult","recomputations","resetRecomputations"],"sourceRoot":""}