{"version":3,"file":"static/js/184.dc5742cf.chunk.js","mappings":"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","sources":["../node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","../node_modules/@tanstack/query-core/src/mutationObserver.ts","../node_modules/@tanstack/react-query/src/useMutation.ts","../node_modules/@tanstack/query-core/src/queryObserver.ts","../node_modules/@tanstack/react-query/src/QueryErrorResetBoundary.tsx","../node_modules/@tanstack/react-query/src/isRestoring.tsx","../node_modules/@tanstack/react-query/src/errorBoundaryUtils.ts","../node_modules/@tanstack/react-query/src/suspense.ts","../node_modules/@tanstack/react-query/src/useQuery.ts","../node_modules/@tanstack/react-query/src/useBaseQuery.ts","../node_modules/@tanstack/react-query/src/useSyncExternalStore.ts","../node_modules/@tanstack/react-query/src/utils.ts"],"sourcesContent":["import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose.js\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}","import type { Action, Mutation } from './mutation'\nimport { getDefaultState } from './mutation'\nimport { notifyManager } from './notifyManager'\nimport type { QueryClient } from './queryClient'\nimport { Subscribable } from './subscribable'\nimport type {\n  MutateOptions,\n  MutationObserverBaseResult,\n  MutationObserverResult,\n  MutationObserverOptions,\n} from './types'\nimport { shallowEqualObjects } from './utils'\n\n// TYPES\n\ntype MutationObserverListener<TData, TError, TVariables, TContext> = (\n  result: MutationObserverResult<TData, TError, TVariables, TContext>,\n) => void\n\ninterface NotifyOptions {\n  listeners?: boolean\n  onError?: boolean\n  onSuccess?: boolean\n}\n\n// CLASS\n\nexport class MutationObserver<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n> extends Subscribable<\n  MutationObserverListener<TData, TError, TVariables, TContext>\n> {\n  options!: MutationObserverOptions<TData, TError, TVariables, TContext>\n\n  private client: QueryClient\n  private currentResult!: MutationObserverResult<\n    TData,\n    TError,\n    TVariables,\n    TContext\n  >\n  private currentMutation?: Mutation<TData, TError, TVariables, TContext>\n  private mutateOptions?: MutateOptions<TData, TError, TVariables, TContext>\n\n  constructor(\n    client: QueryClient,\n    options: MutationObserverOptions<TData, TError, TVariables, TContext>,\n  ) {\n    super()\n\n    this.client = client\n    this.setOptions(options)\n    this.bindMethods()\n    this.updateResult()\n  }\n\n  protected bindMethods(): void {\n    this.mutate = this.mutate.bind(this)\n    this.reset = this.reset.bind(this)\n  }\n\n  setOptions(\n    options?: MutationObserverOptions<TData, TError, TVariables, TContext>,\n  ) {\n    const prevOptions = this.options\n    this.options = this.client.defaultMutationOptions(options)\n    if (!shallowEqualObjects(prevOptions, this.options)) {\n      this.client.getMutationCache().notify({\n        type: 'observerOptionsUpdated',\n        mutation: this.currentMutation,\n        observer: this,\n      })\n    }\n    this.currentMutation?.setOptions(this.options)\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.listeners.length) {\n      this.currentMutation?.removeObserver(this)\n    }\n  }\n\n  onMutationUpdate(action: Action<TData, TError, TVariables, TContext>): void {\n    this.updateResult()\n\n    // Determine which callbacks to trigger\n    const notifyOptions: NotifyOptions = {\n      listeners: true,\n    }\n\n    if (action.type === 'success') {\n      notifyOptions.onSuccess = true\n    } else if (action.type === 'error') {\n      notifyOptions.onError = true\n    }\n\n    this.notify(notifyOptions)\n  }\n\n  getCurrentResult(): MutationObserverResult<\n    TData,\n    TError,\n    TVariables,\n    TContext\n  > {\n    return this.currentResult\n  }\n\n  reset(): void {\n    this.currentMutation = undefined\n    this.updateResult()\n    this.notify({ listeners: true })\n  }\n\n  mutate(\n    variables?: TVariables,\n    options?: MutateOptions<TData, TError, TVariables, TContext>,\n  ): Promise<TData> {\n    this.mutateOptions = options\n\n    if (this.currentMutation) {\n      this.currentMutation.removeObserver(this)\n    }\n\n    this.currentMutation = this.client.getMutationCache().build(this.client, {\n      ...this.options,\n      variables:\n        typeof variables !== 'undefined' ? variables : this.options.variables,\n    })\n\n    this.currentMutation.addObserver(this)\n\n    return this.currentMutation.execute()\n  }\n\n  private updateResult(): void {\n    const state = this.currentMutation\n      ? this.currentMutation.state\n      : getDefaultState<TData, TError, TVariables, TContext>()\n\n    const result: MutationObserverBaseResult<\n      TData,\n      TError,\n      TVariables,\n      TContext\n    > = {\n      ...state,\n      isLoading: state.status === 'loading',\n      isSuccess: state.status === 'success',\n      isError: state.status === 'error',\n      isIdle: state.status === 'idle',\n      mutate: this.mutate,\n      reset: this.reset,\n    }\n\n    this.currentResult = result as MutationObserverResult<\n      TData,\n      TError,\n      TVariables,\n      TContext\n    >\n  }\n\n  private notify(options: NotifyOptions) {\n    notifyManager.batch(() => {\n      // First trigger the mutate callbacks\n      if (this.mutateOptions && this.hasListeners()) {\n        if (options.onSuccess) {\n          this.mutateOptions.onSuccess?.(\n            this.currentResult.data!,\n            this.currentResult.variables!,\n            this.currentResult.context!,\n          )\n          this.mutateOptions.onSettled?.(\n            this.currentResult.data!,\n            null,\n            this.currentResult.variables!,\n            this.currentResult.context,\n          )\n        } else if (options.onError) {\n          this.mutateOptions.onError?.(\n            this.currentResult.error!,\n            this.currentResult.variables!,\n            this.currentResult.context,\n          )\n          this.mutateOptions.onSettled?.(\n            undefined,\n            this.currentResult.error,\n            this.currentResult.variables!,\n            this.currentResult.context,\n          )\n        }\n      }\n\n      // Then trigger the listeners\n      if (options.listeners) {\n        this.listeners.forEach((listener) => {\n          listener(this.currentResult)\n        })\n      }\n    })\n  }\n}\n","'use client'\nimport * as React from 'react'\nimport { useSyncExternalStore } from './useSyncExternalStore'\n\nimport type { MutationFunction, MutationKey } from '@tanstack/query-core'\nimport {\n  notifyManager,\n  parseMutationArgs,\n  MutationObserver,\n} from '@tanstack/query-core'\nimport { useQueryClient } from './QueryClientProvider'\nimport type {\n  UseMutateFunction,\n  UseMutationOptions,\n  UseMutationResult,\n} from './types'\nimport { shouldThrowError } from './utils'\n\n// HOOK\n\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n>(\n  options: UseMutationOptions<TData, TError, TVariables, TContext>,\n): UseMutationResult<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n>(\n  mutationFn: MutationFunction<TData, TVariables>,\n  options?: Omit<\n    UseMutationOptions<TData, TError, TVariables, TContext>,\n    'mutationFn'\n  >,\n): UseMutationResult<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n>(\n  mutationKey: MutationKey,\n  options?: Omit<\n    UseMutationOptions<TData, TError, TVariables, TContext>,\n    'mutationKey'\n  >,\n): UseMutationResult<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n>(\n  mutationKey: MutationKey,\n  mutationFn?: MutationFunction<TData, TVariables>,\n  options?: Omit<\n    UseMutationOptions<TData, TError, TVariables, TContext>,\n    'mutationKey' | 'mutationFn'\n  >,\n): UseMutationResult<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n>(\n  arg1:\n    | MutationKey\n    | MutationFunction<TData, TVariables>\n    | UseMutationOptions<TData, TError, TVariables, TContext>,\n  arg2?:\n    | MutationFunction<TData, TVariables>\n    | UseMutationOptions<TData, TError, TVariables, TContext>,\n  arg3?: UseMutationOptions<TData, TError, TVariables, TContext>,\n): UseMutationResult<TData, TError, TVariables, TContext> {\n  const options = parseMutationArgs(arg1, arg2, arg3)\n  const queryClient = useQueryClient({ context: options.context })\n\n  const [observer] = React.useState(\n    () =>\n      new MutationObserver<TData, TError, TVariables, TContext>(\n        queryClient,\n        options,\n      ),\n  )\n\n  React.useEffect(() => {\n    observer.setOptions(options)\n  }, [observer, options])\n\n  const result = useSyncExternalStore(\n    React.useCallback(\n      (onStoreChange) =>\n        observer.subscribe(notifyManager.batchCalls(onStoreChange)),\n      [observer],\n    ),\n    () => observer.getCurrentResult(),\n    () => observer.getCurrentResult(),\n  )\n\n  const mutate = React.useCallback<\n    UseMutateFunction<TData, TError, TVariables, TContext>\n  >(\n    (variables, mutateOptions) => {\n      observer.mutate(variables, mutateOptions).catch(noop)\n    },\n    [observer],\n  )\n\n  if (\n    result.error &&\n    shouldThrowError(observer.options.useErrorBoundary, [result.error])\n  ) {\n    throw result.error\n  }\n\n  return { ...result, mutate, mutateAsync: result.mutate }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nfunction noop() {}\n","import type { DefaultedQueryObserverOptions, RefetchPageFilters } from './types'\nimport {\n  isServer,\n  isValidTimeout,\n  noop,\n  replaceData,\n  shallowEqualObjects,\n  timeUntilStale,\n} from './utils'\nimport { notifyManager } from './notifyManager'\nimport type {\n  PlaceholderDataFunction,\n  QueryKey,\n  QueryObserverBaseResult,\n  QueryObserverOptions,\n  QueryObserverResult,\n  QueryOptions,\n  RefetchOptions,\n} from './types'\nimport type { Query, QueryState, Action, FetchOptions } from './query'\nimport type { QueryClient } from './queryClient'\nimport { focusManager } from './focusManager'\nimport { Subscribable } from './subscribable'\nimport { canFetch, isCancelledError } from './retryer'\n\ntype QueryObserverListener<TData, TError> = (\n  result: QueryObserverResult<TData, TError>,\n) => void\n\nexport interface NotifyOptions {\n  cache?: boolean\n  listeners?: boolean\n  onError?: boolean\n  onSuccess?: boolean\n}\n\nexport interface ObserverFetchOptions extends FetchOptions {\n  throwOnError?: boolean\n}\n\nexport class QueryObserver<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n> extends Subscribable<QueryObserverListener<TData, TError>> {\n  options: QueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >\n\n  private client: QueryClient\n  private currentQuery!: Query<TQueryFnData, TError, TQueryData, TQueryKey>\n  private currentQueryInitialState!: QueryState<TQueryData, TError>\n  private currentResult!: QueryObserverResult<TData, TError>\n  private currentResultState?: QueryState<TQueryData, TError>\n  private currentResultOptions?: QueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >\n  private previousQueryResult?: QueryObserverResult<TData, TError>\n  private selectError: TError | null\n  private selectFn?: (data: TQueryData) => TData\n  private selectResult?: TData\n  private staleTimeoutId?: ReturnType<typeof setTimeout>\n  private refetchIntervalId?: ReturnType<typeof setInterval>\n  private currentRefetchInterval?: number | false\n  private trackedProps!: Set<keyof QueryObserverResult>\n\n  constructor(\n    client: QueryClient,\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ) {\n    super()\n\n    this.client = client\n    this.options = options\n    this.trackedProps = new Set()\n    this.selectError = null\n    this.bindMethods()\n    this.setOptions(options)\n  }\n\n  protected bindMethods(): void {\n    this.remove = this.remove.bind(this)\n    this.refetch = this.refetch.bind(this)\n  }\n\n  protected onSubscribe(): void {\n    if (this.listeners.length === 1) {\n      this.currentQuery.addObserver(this)\n\n      if (shouldFetchOnMount(this.currentQuery, this.options)) {\n        this.executeFetch()\n      }\n\n      this.updateTimers()\n    }\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.listeners.length) {\n      this.destroy()\n    }\n  }\n\n  shouldFetchOnReconnect(): boolean {\n    return shouldFetchOn(\n      this.currentQuery,\n      this.options,\n      this.options.refetchOnReconnect,\n    )\n  }\n\n  shouldFetchOnWindowFocus(): boolean {\n    return shouldFetchOn(\n      this.currentQuery,\n      this.options,\n      this.options.refetchOnWindowFocus,\n    )\n  }\n\n  destroy(): void {\n    this.listeners = []\n    this.clearStaleTimeout()\n    this.clearRefetchInterval()\n    this.currentQuery.removeObserver(this)\n  }\n\n  setOptions(\n    options?: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n    notifyOptions?: NotifyOptions,\n  ): void {\n    const prevOptions = this.options\n    const prevQuery = this.currentQuery\n\n    this.options = this.client.defaultQueryOptions(options)\n\n    if (\n      process.env.NODE_ENV !== 'production' &&\n      typeof options?.isDataEqual !== 'undefined'\n    ) {\n      this.client\n        .getLogger()\n        .error(\n          `The isDataEqual option has been deprecated and will be removed in the next major version. You can achieve the same functionality by passing a function as the structuralSharing option`,\n        )\n    }\n\n    if (!shallowEqualObjects(prevOptions, this.options)) {\n      this.client.getQueryCache().notify({\n        type: 'observerOptionsUpdated',\n        query: this.currentQuery,\n        observer: this,\n      })\n    }\n\n    if (\n      typeof this.options.enabled !== 'undefined' &&\n      typeof this.options.enabled !== 'boolean'\n    ) {\n      throw new Error('Expected enabled to be a boolean')\n    }\n\n    // Keep previous query key if the user does not supply one\n    if (!this.options.queryKey) {\n      this.options.queryKey = prevOptions.queryKey\n    }\n\n    this.updateQuery()\n\n    const mounted = this.hasListeners()\n\n    // Fetch if there are subscribers\n    if (\n      mounted &&\n      shouldFetchOptionally(\n        this.currentQuery,\n        prevQuery,\n        this.options,\n        prevOptions,\n      )\n    ) {\n      this.executeFetch()\n    }\n\n    // Update result\n    this.updateResult(notifyOptions)\n\n    // Update stale interval if needed\n    if (\n      mounted &&\n      (this.currentQuery !== prevQuery ||\n        this.options.enabled !== prevOptions.enabled ||\n        this.options.staleTime !== prevOptions.staleTime)\n    ) {\n      this.updateStaleTimeout()\n    }\n\n    const nextRefetchInterval = this.computeRefetchInterval()\n\n    // Update refetch interval if needed\n    if (\n      mounted &&\n      (this.currentQuery !== prevQuery ||\n        this.options.enabled !== prevOptions.enabled ||\n        nextRefetchInterval !== this.currentRefetchInterval)\n    ) {\n      this.updateRefetchInterval(nextRefetchInterval)\n    }\n  }\n\n  getOptimisticResult(\n    options: DefaultedQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): QueryObserverResult<TData, TError> {\n    const query = this.client.getQueryCache().build(this.client, options)\n\n    return this.createResult(query, options)\n  }\n\n  getCurrentResult(): QueryObserverResult<TData, TError> {\n    return this.currentResult\n  }\n\n  trackResult(\n    result: QueryObserverResult<TData, TError>,\n  ): QueryObserverResult<TData, TError> {\n    const trackedResult = {} as QueryObserverResult<TData, TError>\n\n    Object.keys(result).forEach((key) => {\n      Object.defineProperty(trackedResult, key, {\n        configurable: false,\n        enumerable: true,\n        get: () => {\n          this.trackedProps.add(key as keyof QueryObserverResult)\n          return result[key as keyof QueryObserverResult]\n        },\n      })\n    })\n\n    return trackedResult\n  }\n\n  getCurrentQuery(): Query<TQueryFnData, TError, TQueryData, TQueryKey> {\n    return this.currentQuery\n  }\n\n  remove(): void {\n    this.client.getQueryCache().remove(this.currentQuery)\n  }\n\n  refetch<TPageData>({\n    refetchPage,\n    ...options\n  }: RefetchOptions & RefetchPageFilters<TPageData> = {}): Promise<\n    QueryObserverResult<TData, TError>\n  > {\n    return this.fetch({\n      ...options,\n      meta: { refetchPage },\n    })\n  }\n\n  fetchOptimistic(\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): Promise<QueryObserverResult<TData, TError>> {\n    const defaultedOptions = this.client.defaultQueryOptions(options)\n\n    const query = this.client\n      .getQueryCache()\n      .build(this.client, defaultedOptions)\n    query.isFetchingOptimistic = true\n\n    return query.fetch().then(() => this.createResult(query, defaultedOptions))\n  }\n\n  protected fetch(\n    fetchOptions: ObserverFetchOptions,\n  ): Promise<QueryObserverResult<TData, TError>> {\n    return this.executeFetch({\n      ...fetchOptions,\n      cancelRefetch: fetchOptions.cancelRefetch ?? true,\n    }).then(() => {\n      this.updateResult()\n      return this.currentResult\n    })\n  }\n\n  private executeFetch(\n    fetchOptions?: ObserverFetchOptions,\n  ): Promise<TQueryData | undefined> {\n    // Make sure we reference the latest query as the current one might have been removed\n    this.updateQuery()\n\n    // Fetch\n    let promise: Promise<TQueryData | undefined> = this.currentQuery.fetch(\n      this.options as QueryOptions<TQueryFnData, TError, TQueryData, TQueryKey>,\n      fetchOptions,\n    )\n\n    if (!fetchOptions?.throwOnError) {\n      promise = promise.catch(noop)\n    }\n\n    return promise\n  }\n\n  private updateStaleTimeout(): void {\n    this.clearStaleTimeout()\n\n    if (\n      isServer ||\n      this.currentResult.isStale ||\n      !isValidTimeout(this.options.staleTime)\n    ) {\n      return\n    }\n\n    const time = timeUntilStale(\n      this.currentResult.dataUpdatedAt,\n      this.options.staleTime,\n    )\n\n    // The timeout is sometimes triggered 1 ms before the stale time expiration.\n    // To mitigate this issue we always add 1 ms to the timeout.\n    const timeout = time + 1\n\n    this.staleTimeoutId = setTimeout(() => {\n      if (!this.currentResult.isStale) {\n        this.updateResult()\n      }\n    }, timeout)\n  }\n\n  private computeRefetchInterval() {\n    return typeof this.options.refetchInterval === 'function'\n      ? this.options.refetchInterval(this.currentResult.data, this.currentQuery)\n      : this.options.refetchInterval ?? false\n  }\n\n  private updateRefetchInterval(nextInterval: number | false): void {\n    this.clearRefetchInterval()\n\n    this.currentRefetchInterval = nextInterval\n\n    if (\n      isServer ||\n      this.options.enabled === false ||\n      !isValidTimeout(this.currentRefetchInterval) ||\n      this.currentRefetchInterval === 0\n    ) {\n      return\n    }\n\n    this.refetchIntervalId = setInterval(() => {\n      if (\n        this.options.refetchIntervalInBackground ||\n        focusManager.isFocused()\n      ) {\n        this.executeFetch()\n      }\n    }, this.currentRefetchInterval)\n  }\n\n  private updateTimers(): void {\n    this.updateStaleTimeout()\n    this.updateRefetchInterval(this.computeRefetchInterval())\n  }\n\n  private clearStaleTimeout(): void {\n    if (this.staleTimeoutId) {\n      clearTimeout(this.staleTimeoutId)\n      this.staleTimeoutId = undefined\n    }\n  }\n\n  private clearRefetchInterval(): void {\n    if (this.refetchIntervalId) {\n      clearInterval(this.refetchIntervalId)\n      this.refetchIntervalId = undefined\n    }\n  }\n\n  protected createResult(\n    query: Query<TQueryFnData, TError, TQueryData, TQueryKey>,\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): QueryObserverResult<TData, TError> {\n    const prevQuery = this.currentQuery\n    const prevOptions = this.options\n    const prevResult = this.currentResult as\n      | QueryObserverResult<TData, TError>\n      | undefined\n    const prevResultState = this.currentResultState\n    const prevResultOptions = this.currentResultOptions\n    const queryChange = query !== prevQuery\n    const queryInitialState = queryChange\n      ? query.state\n      : this.currentQueryInitialState\n    const prevQueryResult = queryChange\n      ? this.currentResult\n      : this.previousQueryResult\n\n    const { state } = query\n    let { dataUpdatedAt, error, errorUpdatedAt, fetchStatus, status } = state\n    let isPreviousData = false\n    let isPlaceholderData = false\n    let data: TData | undefined\n\n    // Optimistically set result in fetching state if needed\n    if (options._optimisticResults) {\n      const mounted = this.hasListeners()\n\n      const fetchOnMount = !mounted && shouldFetchOnMount(query, options)\n\n      const fetchOptionally =\n        mounted && shouldFetchOptionally(query, prevQuery, options, prevOptions)\n\n      if (fetchOnMount || fetchOptionally) {\n        fetchStatus = canFetch(query.options.networkMode)\n          ? 'fetching'\n          : 'paused'\n        if (!dataUpdatedAt) {\n          status = 'loading'\n        }\n      }\n      if (options._optimisticResults === 'isRestoring') {\n        fetchStatus = 'idle'\n      }\n    }\n\n    // Keep previous data if needed\n    if (\n      options.keepPreviousData &&\n      !state.dataUpdatedAt &&\n      prevQueryResult?.isSuccess &&\n      status !== 'error'\n    ) {\n      data = prevQueryResult.data\n      dataUpdatedAt = prevQueryResult.dataUpdatedAt\n      status = prevQueryResult.status\n      isPreviousData = true\n    }\n    // Select data if needed\n    else if (options.select && typeof state.data !== 'undefined') {\n      // Memoize select result\n      if (\n        prevResult &&\n        state.data === prevResultState?.data &&\n        options.select === this.selectFn\n      ) {\n        data = this.selectResult\n      } else {\n        try {\n          this.selectFn = options.select\n          data = options.select(state.data)\n          data = replaceData(prevResult?.data, data, options)\n          this.selectResult = data\n          this.selectError = null\n        } catch (selectError) {\n          if (process.env.NODE_ENV !== 'production') {\n            this.client.getLogger().error(selectError)\n          }\n          this.selectError = selectError as TError\n        }\n      }\n    }\n    // Use query data\n    else {\n      data = state.data as unknown as TData\n    }\n\n    // Show placeholder data if needed\n    if (\n      typeof options.placeholderData !== 'undefined' &&\n      typeof data === 'undefined' &&\n      status === 'loading'\n    ) {\n      let placeholderData\n\n      // Memoize placeholder data\n      if (\n        prevResult?.isPlaceholderData &&\n        options.placeholderData === prevResultOptions?.placeholderData\n      ) {\n        placeholderData = prevResult.data\n      } else {\n        placeholderData =\n          typeof options.placeholderData === 'function'\n            ? (options.placeholderData as PlaceholderDataFunction<TQueryData>)()\n            : options.placeholderData\n        if (options.select && typeof placeholderData !== 'undefined') {\n          try {\n            placeholderData = options.select(placeholderData)\n            this.selectError = null\n          } catch (selectError) {\n            if (process.env.NODE_ENV !== 'production') {\n              this.client.getLogger().error(selectError)\n            }\n            this.selectError = selectError as TError\n          }\n        }\n      }\n\n      if (typeof placeholderData !== 'undefined') {\n        status = 'success'\n        data = replaceData(prevResult?.data, placeholderData, options) as TData\n        isPlaceholderData = true\n      }\n    }\n\n    if (this.selectError) {\n      error = this.selectError as any\n      data = this.selectResult\n      errorUpdatedAt = Date.now()\n      status = 'error'\n    }\n\n    const isFetching = fetchStatus === 'fetching'\n    const isLoading = status === 'loading'\n    const isError = status === 'error'\n\n    const result: QueryObserverBaseResult<TData, TError> = {\n      status,\n      fetchStatus,\n      isLoading,\n      isSuccess: status === 'success',\n      isError,\n      isInitialLoading: isLoading && isFetching,\n      data,\n      dataUpdatedAt,\n      error,\n      errorUpdatedAt,\n      failureCount: state.fetchFailureCount,\n      failureReason: state.fetchFailureReason,\n      errorUpdateCount: state.errorUpdateCount,\n      isFetched: state.dataUpdateCount > 0 || state.errorUpdateCount > 0,\n      isFetchedAfterMount:\n        state.dataUpdateCount > queryInitialState.dataUpdateCount ||\n        state.errorUpdateCount > queryInitialState.errorUpdateCount,\n      isFetching,\n      isRefetching: isFetching && !isLoading,\n      isLoadingError: isError && state.dataUpdatedAt === 0,\n      isPaused: fetchStatus === 'paused',\n      isPlaceholderData,\n      isPreviousData,\n      isRefetchError: isError && state.dataUpdatedAt !== 0,\n      isStale: isStale(query, options),\n      refetch: this.refetch,\n      remove: this.remove,\n    }\n\n    return result as QueryObserverResult<TData, TError>\n  }\n\n  updateResult(notifyOptions?: NotifyOptions): void {\n    const prevResult = this.currentResult as\n      | QueryObserverResult<TData, TError>\n      | undefined\n\n    const nextResult = this.createResult(this.currentQuery, this.options)\n    this.currentResultState = this.currentQuery.state\n    this.currentResultOptions = this.options\n\n    // Only notify and update result if something has changed\n    if (shallowEqualObjects(nextResult, prevResult)) {\n      return\n    }\n\n    this.currentResult = nextResult\n\n    // Determine which callbacks to trigger\n    const defaultNotifyOptions: NotifyOptions = { cache: true }\n\n    const shouldNotifyListeners = (): boolean => {\n      if (!prevResult) {\n        return true\n      }\n\n      const { notifyOnChangeProps } = this.options\n\n      if (\n        notifyOnChangeProps === 'all' ||\n        (!notifyOnChangeProps && !this.trackedProps.size)\n      ) {\n        return true\n      }\n\n      const includedProps = new Set(notifyOnChangeProps ?? this.trackedProps)\n\n      if (this.options.useErrorBoundary) {\n        includedProps.add('error')\n      }\n\n      return Object.keys(this.currentResult).some((key) => {\n        const typedKey = key as keyof QueryObserverResult\n        const changed = this.currentResult[typedKey] !== prevResult[typedKey]\n        return changed && includedProps.has(typedKey)\n      })\n    }\n\n    if (notifyOptions?.listeners !== false && shouldNotifyListeners()) {\n      defaultNotifyOptions.listeners = true\n    }\n\n    this.notify({ ...defaultNotifyOptions, ...notifyOptions })\n  }\n\n  private updateQuery(): void {\n    const query = this.client.getQueryCache().build(this.client, this.options)\n\n    if (query === this.currentQuery) {\n      return\n    }\n\n    const prevQuery = this.currentQuery as\n      | Query<TQueryFnData, TError, TQueryData, TQueryKey>\n      | undefined\n    this.currentQuery = query\n    this.currentQueryInitialState = query.state\n    this.previousQueryResult = this.currentResult\n\n    if (this.hasListeners()) {\n      prevQuery?.removeObserver(this)\n      query.addObserver(this)\n    }\n  }\n\n  onQueryUpdate(action: Action<TData, TError>): void {\n    const notifyOptions: NotifyOptions = {}\n\n    if (action.type === 'success') {\n      notifyOptions.onSuccess = !action.manual\n    } else if (action.type === 'error' && !isCancelledError(action.error)) {\n      notifyOptions.onError = true\n    }\n\n    this.updateResult(notifyOptions)\n\n    if (this.hasListeners()) {\n      this.updateTimers()\n    }\n  }\n\n  private notify(notifyOptions: NotifyOptions): void {\n    notifyManager.batch(() => {\n      // First trigger the configuration callbacks\n      if (notifyOptions.onSuccess) {\n        this.options.onSuccess?.(this.currentResult.data!)\n        this.options.onSettled?.(this.currentResult.data!, null)\n      } else if (notifyOptions.onError) {\n        this.options.onError?.(this.currentResult.error!)\n        this.options.onSettled?.(undefined, this.currentResult.error!)\n      }\n\n      // Then trigger the listeners\n      if (notifyOptions.listeners) {\n        this.listeners.forEach((listener) => {\n          listener(this.currentResult)\n        })\n      }\n\n      // Then the cache listeners\n      if (notifyOptions.cache) {\n        this.client.getQueryCache().notify({\n          query: this.currentQuery,\n          type: 'observerResultsUpdated',\n        })\n      }\n    })\n  }\n}\n\nfunction shouldLoadOnMount(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any>,\n): boolean {\n  return (\n    options.enabled !== false &&\n    !query.state.dataUpdatedAt &&\n    !(query.state.status === 'error' && options.retryOnMount === false)\n  )\n}\n\nfunction shouldFetchOnMount(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n): boolean {\n  return (\n    shouldLoadOnMount(query, options) ||\n    (query.state.dataUpdatedAt > 0 &&\n      shouldFetchOn(query, options, options.refetchOnMount))\n  )\n}\n\nfunction shouldFetchOn(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n  field: typeof options['refetchOnMount'] &\n    typeof options['refetchOnWindowFocus'] &\n    typeof options['refetchOnReconnect'],\n) {\n  if (options.enabled !== false) {\n    const value = typeof field === 'function' ? field(query) : field\n\n    return value === 'always' || (value !== false && isStale(query, options))\n  }\n  return false\n}\n\nfunction shouldFetchOptionally(\n  query: Query<any, any, any, any>,\n  prevQuery: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n  prevOptions: QueryObserverOptions<any, any, any, any, any>,\n): boolean {\n  return (\n    options.enabled !== false &&\n    (query !== prevQuery || prevOptions.enabled === false) &&\n    (!options.suspense || query.state.status !== 'error') &&\n    isStale(query, options)\n  )\n}\n\nfunction isStale(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n): boolean {\n  return query.isStaleByTime(options.staleTime)\n}\n","'use client'\nimport * as React from 'react'\n\n// CONTEXT\n\nexport interface QueryErrorResetBoundaryValue {\n  clearReset: () => void\n  isReset: () => boolean\n  reset: () => void\n}\n\nfunction createValue(): QueryErrorResetBoundaryValue {\n  let isReset = false\n  return {\n    clearReset: () => {\n      isReset = false\n    },\n    reset: () => {\n      isReset = true\n    },\n    isReset: () => {\n      return isReset\n    },\n  }\n}\n\nconst QueryErrorResetBoundaryContext = React.createContext(createValue())\n\n// HOOK\n\nexport const useQueryErrorResetBoundary = () =>\n  React.useContext(QueryErrorResetBoundaryContext)\n\n// COMPONENT\n\nexport interface QueryErrorResetBoundaryProps {\n  children:\n    | ((value: QueryErrorResetBoundaryValue) => React.ReactNode)\n    | React.ReactNode\n}\n\nexport const QueryErrorResetBoundary = ({\n  children,\n}: QueryErrorResetBoundaryProps) => {\n  const [value] = React.useState(() => createValue())\n  return (\n    <QueryErrorResetBoundaryContext.Provider value={value}>\n      {typeof children === 'function'\n        ? (children as Function)(value)\n        : children}\n    </QueryErrorResetBoundaryContext.Provider>\n  )\n}\n","'use client'\nimport * as React from 'react'\n\nconst IsRestoringContext = React.createContext(false)\n\nexport const useIsRestoring = () => React.useContext(IsRestoringContext)\nexport const IsRestoringProvider = IsRestoringContext.Provider\n","'use client'\nimport type {\n  DefaultedQueryObserverOptions,\n  Query,\n  QueryKey,\n  QueryObserverResult,\n  UseErrorBoundary,\n} from '@tanstack/query-core'\nimport type { QueryErrorResetBoundaryValue } from './QueryErrorResetBoundary'\nimport * as React from 'react'\nimport { shouldThrowError } from './utils'\n\nexport const ensurePreventErrorBoundaryRetry = <\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryData,\n  TQueryKey extends QueryKey,\n>(\n  options: DefaultedQueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >,\n  errorResetBoundary: QueryErrorResetBoundaryValue,\n) => {\n  if (options.suspense || options.useErrorBoundary) {\n    // Prevent retrying failed query if the error boundary has not been reset yet\n    if (!errorResetBoundary.isReset()) {\n      options.retryOnMount = false\n    }\n  }\n}\n\nexport const useClearResetErrorBoundary = (\n  errorResetBoundary: QueryErrorResetBoundaryValue,\n) => {\n  React.useEffect(() => {\n    errorResetBoundary.clearReset()\n  }, [errorResetBoundary])\n}\n\nexport const getHasError = <\n  TData,\n  TError,\n  TQueryFnData,\n  TQueryData,\n  TQueryKey extends QueryKey,\n>({\n  result,\n  errorResetBoundary,\n  useErrorBoundary,\n  query,\n}: {\n  result: QueryObserverResult<TData, TError>\n  errorResetBoundary: QueryErrorResetBoundaryValue\n  useErrorBoundary: UseErrorBoundary<\n    TQueryFnData,\n    TError,\n    TQueryData,\n    TQueryKey\n  >\n  query: Query<TQueryFnData, TError, TQueryData, TQueryKey>\n}) => {\n  return (\n    result.isError &&\n    !errorResetBoundary.isReset() &&\n    !result.isFetching &&\n    shouldThrowError(useErrorBoundary, [result.error, query])\n  )\n}\n","import type { DefaultedQueryObserverOptions } from '@tanstack/query-core'\nimport type { QueryObserver } from '@tanstack/query-core'\nimport type { QueryErrorResetBoundaryValue } from './QueryErrorResetBoundary'\nimport type { QueryObserverResult } from '@tanstack/query-core'\nimport type { QueryKey } from '@tanstack/query-core'\n\nexport const ensureStaleTime = (\n  defaultedOptions: DefaultedQueryObserverOptions<any, any, any, any, any>,\n) => {\n  if (defaultedOptions.suspense) {\n    // Always set stale time when using suspense to prevent\n    // fetching again when directly mounting after suspending\n    if (typeof defaultedOptions.staleTime !== 'number') {\n      defaultedOptions.staleTime = 1000\n    }\n  }\n}\n\nexport const willFetch = (\n  result: QueryObserverResult<any, any>,\n  isRestoring: boolean,\n) => result.isLoading && result.isFetching && !isRestoring\n\nexport const shouldSuspend = (\n  defaultedOptions:\n    | DefaultedQueryObserverOptions<any, any, any, any, any>\n    | undefined,\n  result: QueryObserverResult<any, any>,\n  isRestoring: boolean,\n) => defaultedOptions?.suspense && willFetch(result, isRestoring)\n\nexport const fetchOptimistic = <\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryData,\n  TQueryKey extends QueryKey,\n>(\n  defaultedOptions: DefaultedQueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >,\n  observer: QueryObserver<TQueryFnData, TError, TData, TQueryData, TQueryKey>,\n  errorResetBoundary: QueryErrorResetBoundaryValue,\n) =>\n  observer\n    .fetchOptimistic(defaultedOptions)\n    .then(({ data }) => {\n      defaultedOptions.onSuccess?.(data as TData)\n      defaultedOptions.onSettled?.(data, null)\n    })\n    .catch((error) => {\n      errorResetBoundary.clearReset()\n      defaultedOptions.onError?.(error)\n      defaultedOptions.onSettled?.(undefined, error)\n    })\n","'use client'\nimport type { QueryFunction, QueryKey } from '@tanstack/query-core'\nimport { parseQueryArgs, QueryObserver } from '@tanstack/query-core'\nimport type {\n  DefinedUseQueryResult,\n  UseQueryOptions,\n  UseQueryResult,\n} from './types'\nimport { useBaseQuery } from './useBaseQuery'\n\n// HOOK\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  options: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'initialData'\n  > & { initialData?: () => undefined },\n): UseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  options: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'initialData'\n  > & { initialData: TQueryFnData | (() => TQueryFnData) },\n): DefinedUseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  options: UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n): UseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: TQueryKey,\n  options?: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'queryKey' | 'initialData'\n  > & { initialData?: () => undefined },\n): UseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: TQueryKey,\n  options?: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'queryKey' | 'initialData'\n  > & { initialData: TQueryFnData | (() => TQueryFnData) },\n): DefinedUseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: TQueryKey,\n  options?: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'queryKey'\n  >,\n): UseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: TQueryKey,\n  queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n  options?: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'queryKey' | 'queryFn' | 'initialData'\n  > & { initialData?: () => undefined },\n): UseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: TQueryKey,\n  queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n  options?: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'queryKey' | 'queryFn' | 'initialData'\n  > & { initialData: TQueryFnData | (() => TQueryFnData) },\n): DefinedUseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: TQueryKey,\n  queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n  options?: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'queryKey' | 'queryFn'\n  >,\n): UseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData,\n  TError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  arg1: TQueryKey | UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  arg2?:\n    | QueryFunction<TQueryFnData, TQueryKey>\n    | UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  arg3?: UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n): UseQueryResult<TData, TError> {\n  const parsedOptions = parseQueryArgs(arg1, arg2, arg3)\n  return useBaseQuery(parsedOptions, QueryObserver)\n}\n","'use client'\nimport * as React from 'react'\nimport { useSyncExternalStore } from './useSyncExternalStore'\n\nimport type { QueryKey, QueryObserver } from '@tanstack/query-core'\nimport { notifyManager } from '@tanstack/query-core'\nimport { useQueryErrorResetBoundary } from './QueryErrorResetBoundary'\nimport { useQueryClient } from './QueryClientProvider'\nimport type { UseBaseQueryOptions } from './types'\nimport { useIsRestoring } from './isRestoring'\nimport {\n  ensurePreventErrorBoundaryRetry,\n  getHasError,\n  useClearResetErrorBoundary,\n} from './errorBoundaryUtils'\nimport { ensureStaleTime, shouldSuspend, fetchOptimistic } from './suspense'\n\nexport function useBaseQuery<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryData,\n  TQueryKey extends QueryKey,\n>(\n  options: UseBaseQueryOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >,\n  Observer: typeof QueryObserver,\n) {\n  const queryClient = useQueryClient({ context: options.context })\n  const isRestoring = useIsRestoring()\n  const errorResetBoundary = useQueryErrorResetBoundary()\n  const defaultedOptions = queryClient.defaultQueryOptions(options)\n\n  // Make sure results are optimistically set in fetching state before subscribing or updating options\n  defaultedOptions._optimisticResults = isRestoring\n    ? 'isRestoring'\n    : 'optimistic'\n\n  // Include callbacks in batch renders\n  if (defaultedOptions.onError) {\n    defaultedOptions.onError = notifyManager.batchCalls(\n      defaultedOptions.onError,\n    )\n  }\n\n  if (defaultedOptions.onSuccess) {\n    defaultedOptions.onSuccess = notifyManager.batchCalls(\n      defaultedOptions.onSuccess,\n    )\n  }\n\n  if (defaultedOptions.onSettled) {\n    defaultedOptions.onSettled = notifyManager.batchCalls(\n      defaultedOptions.onSettled,\n    )\n  }\n\n  ensureStaleTime(defaultedOptions)\n  ensurePreventErrorBoundaryRetry(defaultedOptions, errorResetBoundary)\n\n  useClearResetErrorBoundary(errorResetBoundary)\n\n  const [observer] = React.useState(\n    () =>\n      new Observer<TQueryFnData, TError, TData, TQueryData, TQueryKey>(\n        queryClient,\n        defaultedOptions,\n      ),\n  )\n\n  const result = observer.getOptimisticResult(defaultedOptions)\n\n  useSyncExternalStore(\n    React.useCallback(\n      (onStoreChange) =>\n        isRestoring\n          ? () => undefined\n          : observer.subscribe(notifyManager.batchCalls(onStoreChange)),\n      [observer, isRestoring],\n    ),\n    () => observer.getCurrentResult(),\n    () => observer.getCurrentResult(),\n  )\n\n  React.useEffect(() => {\n    // Do not notify on updates because of changes in the options because\n    // these changes should already be reflected in the optimistic result.\n    observer.setOptions(defaultedOptions, { listeners: false })\n  }, [defaultedOptions, observer])\n\n  // Handle suspense\n  if (shouldSuspend(defaultedOptions, result, isRestoring)) {\n    throw fetchOptimistic(defaultedOptions, observer, errorResetBoundary)\n  }\n\n  // Handle error boundary\n  if (\n    getHasError({\n      result,\n      errorResetBoundary,\n      useErrorBoundary: defaultedOptions.useErrorBoundary,\n      query: observer.getCurrentQuery(),\n    })\n  ) {\n    throw result.error\n  }\n\n  // Handle result property usage tracking\n  return !defaultedOptions.notifyOnChangeProps\n    ? observer.trackResult(result)\n    : result\n}\n","'use client'\n// Temporary workaround due to an issue with react-native uSES - https://github.com/TanStack/query/pull/3601\nimport { useSyncExternalStore as uSES } from 'use-sync-external-store/shim/index.js'\n\nexport const useSyncExternalStore = uSES\n","export function shouldThrowError<T extends (...args: any[]) => boolean>(\n  _useErrorBoundary: boolean | T | undefined,\n  params: Parameters<T>,\n): boolean {\n  // Allow useErrorBoundary function to override throwing behavior on a per-error basis\n  if (typeof _useErrorBoundary === 'function') {\n    return _useErrorBoundary(...params)\n  }\n\n  return !!_useErrorBoundary\n}\n"],"names":["_objectWithoutProperties","source","excluded","key","i","target","sourceKeys","Object","keys","length","indexOf","getOwnPropertySymbols","sourceSymbolKeys","prototype","propertyIsEnumerable","call","MutationObserver","_Subscribable","_inherits","_super","_createSuper","client","options","_this","_classCallCheck","setOptions","bindMethods","updateResult","_createClass","value","this","mutate","bind","reset","_this$currentMutation","prevOptions","defaultMutationOptions","shallowEqualObjects","getMutationCache","notify","type","mutation","currentMutation","observer","_this$currentMutation2","listeners","removeObserver","action","notifyOptions","onSuccess","onError","currentResult","undefined","variables","mutateOptions","build","_objectSpread","addObserver","execute","state","getDefaultState","result","isLoading","status","isSuccess","isError","isIdle","_this2","notifyManager","_this$mutateOptions$o","_this$mutateOptions","_this$mutateOptions$o2","_this$mutateOptions2","hasListeners","data","context","onSettled","_this$mutateOptions$o3","_this$mutateOptions3","_this$mutateOptions$o4","_this$mutateOptions4","error","forEach","listener","Subscribable","useMutation","arg1","arg2","arg3","_React$useState","React","queryClient","_slicedToArray","useSyncExternalStore","onStoreChange","subscribe","getCurrentResult","shouldThrowError","useErrorBoundary","noop","QueryObserver","trackedProps","Set","selectError","remove","refetch","currentQuery","shouldFetchOnMount","executeFetch","updateTimers","destroy","shouldFetchOn","refetchOnReconnect","refetchOnWindowFocus","clearStaleTimeout","clearRefetchInterval","prevQuery","defaultQueryOptions","getQueryCache","query","enabled","Error","queryKey","updateQuery","mounted","shouldFetchOptionally","staleTime","updateStaleTimeout","nextRefetchInterval","computeRefetchInterval","currentRefetchInterval","updateRefetchInterval","createResult","trackedResult","defineProperty","configurable","enumerable","get","add","_ref","arguments","refetchPage","_excluded","fetch","meta","_this3","defaultedOptions","isFetchingOptimistic","then","fetchOptions","_fetchOptions$cancelR","_this4","cancelRefetch","promise","throwOnError","catch","_this5","isServer","isStale","isValidTimeout","timeout","timeUntilStale","dataUpdatedAt","staleTimeoutId","setTimeout","_this$options$refetch","refetchInterval","nextInterval","_this6","refetchIntervalId","setInterval","refetchIntervalInBackground","focusManager","clearTimeout","clearInterval","prevResult","prevResultState","currentResultState","prevResultOptions","currentResultOptions","queryChange","queryInitialState","currentQueryInitialState","prevQueryResult","previousQueryResult","errorUpdatedAt","fetchStatus","isPreviousData","isPlaceholderData","_optimisticResults","fetchOnMount","fetchOptionally","canFetch","networkMode","keepPreviousData","select","selectFn","selectResult","replaceData","process","placeholderData","Date","now","isFetching","isInitialLoading","failureCount","fetchFailureCount","failureReason","fetchFailureReason","errorUpdateCount","isFetched","dataUpdateCount","isFetchedAfterMount","isRefetching","isLoadingError","isPaused","isRefetchError","_this7","nextResult","defaultNotifyOptions","cache","notifyOnChangeProps","size","includedProps","some","typedKey","has","shouldNotifyListeners","manual","isCancelledError","_this8","_this$options$onSucce","_this$options","_this$options$onSettl","_this$options2","_this$options$onError","_this$options3","_this$options$onSettl2","_this$options4","retryOnMount","shouldLoadOnMount","refetchOnMount","field","suspense","isStaleByTime","createValue","clearReset","isReset","QueryErrorResetBoundaryContext","useQueryErrorResetBoundary","IsRestoringContext","useIsRestoring","Provider","errorResetBoundary","useClearResetErrorBoundary","getHasError","ensureStaleTime","shouldSuspend","isRestoring","willFetch","fetchOptimistic","useQuery","Observer","ensurePreventErrorBoundaryRetry","getOptimisticResult","trackResult","useBaseQuery","useSyncExternalStore$1","_useErrorBoundary","params","apply","_toConsumableArray"],"sourceRoot":""}