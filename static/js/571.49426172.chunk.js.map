{"version":3,"file":"static/js/571.49426172.chunk.js","mappings":"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","sources":["components/rentInfo/RentInfo.js","components/сustomTaskForm/CustomTaskForm.js","helpers/generateTasksForMonth.js","components/taskSelector/TaskSelector.js","components/taskFilter/TaskFilter.jsx","constants/executors.js","components/taskTable/TaskTable.js","helpers/ageOfQueen.js","components/beeHiveCard/BeeHiveCard.styled.js","components/beeHiveCard/BeeHiveCard.jsx","hooks/useLockBodyScroll.js","pages/HiveCard.jsx"],"sourcesContent":["import {\r\n  calculateHiveRent,\r\n  calculateBeeColonyRent,\r\n} from \"../../helpers/calculateRent\";\r\n\r\nexport const RentInfo = ({ hiveComponents, power, totalRent }) => {\r\n  return (\r\n    <div>\r\n      <h4>\r\n        Вартість оренди вулика з бджолосім'єю на{\" \"}\r\n        <span>{new Date().toLocaleString(\"uk-UA\", { month: \"long\" })}</span>{\" \"}\r\n        місяць:{\" \"}\r\n        <span\r\n          style={{ position: \"relative\", cursor: \"pointer\" }}\r\n          title={`Деталі розрахунку:\\n- Оренда вулика: ${calculateHiveRent(\r\n            hiveComponents\r\n          )}$\\n- Оренда бджолосімї: ${calculateBeeColonyRent(power)}$`}\r\n        >\r\n          {totalRent} $/міс\r\n        </span>\r\n      </h4>\r\n    </div>\r\n  );\r\n};\r\n","export const CustomTaskForm = ({\r\n  customTask,\r\n  handleCustomTaskChange,\r\n  handleAddTask,\r\n  errorMessage,\r\n}) => {\r\n  return (\r\n    <div>\r\n      <h4>Створення власного завдання</h4>\r\n      <label>\r\n        Назва<span style={{ color: \"red\" }}> *</span>:\r\n        <input\r\n          type=\"text\"\r\n          name=\"name\"\r\n          value={customTask.name}\r\n          onChange={handleCustomTaskChange}\r\n        />\r\n      </label>\r\n      <br />\r\n      <label>\r\n        Мета<span style={{ color: \"red\" }}> *</span>:\r\n        <input\r\n          type=\"text\"\r\n          name=\"purpose\"\r\n          value={customTask.purpose}\r\n          onChange={handleCustomTaskChange}\r\n        />\r\n      </label>\r\n      <br />\r\n      <label>\r\n        Опис<span style={{ color: \"red\" }}> *</span>:\r\n        <textarea\r\n          name=\"description\"\r\n          value={customTask.description}\r\n          onChange={handleCustomTaskChange}\r\n        />\r\n      </label>\r\n      <br />\r\n      <label>\r\n        Тривалість (хвилини)<span style={{ color: \"red\" }}> *</span>:\r\n        <input\r\n          type=\"number\"\r\n          name=\"duration\"\r\n          value={customTask.duration}\r\n          onChange={handleCustomTaskChange}\r\n        />\r\n      </label>\r\n      <br />\r\n      <label>\r\n        Вартість за годину роботи ($)<span style={{ color: \"red\" }}> *</span>:\r\n        <input\r\n          type=\"number\"\r\n          name=\"costPerHour\"\r\n          value={customTask.costPerHour}\r\n          onChange={handleCustomTaskChange}\r\n        />\r\n      </label>\r\n      <br />\r\n      <label>\r\n        Примітки<span style={{ color: \"red\" }}> *</span>:\r\n        <textarea\r\n          name=\"notes\"\r\n          value={customTask.notes}\r\n          onChange={handleCustomTaskChange}\r\n        />\r\n      </label>\r\n      <br />\r\n      {/* Повідомлення про помилку */}\r\n      {errorMessage && <p style={{ color: \"red\" }}>{errorMessage}</p>}\r\n\r\n      <button onClick={handleAddTask}>Додати власне завдання</button>\r\n    </div>\r\n  );\r\n};\r\n","import { v4 as uuidv4 } from \"uuid\";\r\n\r\nimport { beekeepingTasks } from \"../constants/beekeepingTasks\";\r\n\r\nexport const generateTasksForMonth = (\r\n  currentMonth,\r\n  hiveId,\r\n  selectedServices\r\n) => {\r\n  const now = new Date();\r\n  const twoDaysBefore = new Date(now.getTime() + 49 * 60 * 60 * 1000); // 48 годин до поточної дати\r\n  const plannedDate = twoDaysBefore.toISOString().slice(0, 16); // Призначення значення за замовчуванням\r\n\r\n  const tasks = beekeepingTasks\r\n    .filter((task) => {\r\n      // Завдання має бути доступне для поточного місяця\r\n      const isCurrentMonth = task.month.includes(currentMonth);\r\n\r\n      // Завдання обов'язкове\r\n      const isRequiredTask = task.priority === \"обов'язкова\";\r\n\r\n      // Отримати список обраних сервісів\r\n      // const selectedServices = Object.entries(additionalServices)\r\n      //   .filter(([_, isSelected]) => isSelected) // Враховуються лише обрані сервіси\r\n      //   .map(([service]) => service);\r\n\r\n      // Додатковий сервіс відповідає завданню\r\n      const matchesSelectedServices =\r\n        Array.isArray(task.purpose) &&\r\n        task.purpose.length > 0 &&\r\n        task.purpose.some((purpose) => selectedServices.includes(purpose));\r\n\r\n      // Завдання додається, якщо:\r\n      // 1. Воно обов'язкове\r\n      // 2. Відповідає обраному сервісу\r\n      // 3. І все це доступне у поточному місяці\r\n      return isCurrentMonth || isRequiredTask || matchesSelectedServices;\r\n    })\r\n    .map((task) => ({\r\n      id: uuidv4(),\r\n      hiveId,\r\n      name: task.name,\r\n      purpose: task.purpose,\r\n      description: task.description,\r\n      cost: task.duration * (task.costPerHour / 60),\r\n      plannedDate,\r\n      duration: task.duration,\r\n      status: \"Pending\",\r\n      executor: null,\r\n      date: null,\r\n      notes: \"\",\r\n      priority: task.priority || null,\r\n      frequency: task.frequency || null,\r\n    }));\r\n  return tasks;\r\n};\r\n\r\nexport const unifyTask = (task, hiveId) => {\r\n  const now = new Date();\r\n  const twoDaysBefore = new Date(now.getTime() + 49 * 60 * 60 * 1000); // 48 годин до поточної дати\r\n  const plannedDate = twoDaysBefore.toISOString().slice(0, 16); // Призначення значення за замовчуванням\r\n\r\n  return {\r\n    id: uuidv4(), // Генеруємо унікальний ID для кожного завдання\r\n    hiveId,\r\n    name: task.name,\r\n    purpose: task.purpose,\r\n    description: task.description,\r\n    cost: task.cost || task.duration * (task.costPerHour / 60),\r\n    plannedDate,\r\n    duration: task.duration,\r\n    status: \"Pending\",\r\n    executor: null,\r\n    date: null,\r\n    notes: task.notes || \"\",\r\n    priority: task.priority || null,\r\n  };\r\n};\r\n\r\nexport const generateMissingTasks = (\r\n  currentTasks,\r\n  requiredTasks,\r\n  currentMonth,\r\n  hiveId\r\n) => {\r\n  const missingTasks = [];\r\n\r\n  requiredTasks.forEach((task) => {\r\n    const currentTaskCount = currentTasks.filter(\r\n      (t) => t.name === task.name\r\n    ).length;\r\n\r\n    const requiredCount = task.frequency ? task.frequency[currentMonth] : 1; // Частота завдання для поточного місяця\r\n    if (currentTaskCount < requiredCount) {\r\n      const tasksToGenerate = requiredCount - currentTaskCount;\r\n\r\n      for (let i = 0; i < tasksToGenerate; i++) {\r\n        const newTask = unifyTask(task, hiveId); // Використовуємо unifyTask для створення нового завдання\r\n        missingTasks.push(newTask);\r\n      }\r\n    }\r\n  });\r\n\r\n  return missingTasks;\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nimport { CustomTaskForm } from \"../сustomTaskForm/CustomTaskForm\";\r\nimport { beekeepingTasks } from \"../../constants/beekeepingTasks\";\r\nimport { unifyTask } from \"../../helpers/generateTasksForMonth\";\r\nimport { useUpdateHiveTasks, useAddSingleTasks } from \"../../hooks/useHives\";\r\nimport { addTaskToHive } from \"../../redux/hivesSlice\";\r\n\r\nexport const TaskSelector = ({ hiveId }) => {\r\n  const dispatch = useDispatch();\r\n  // Стан для обраного завдання\r\n  const [selectedTask, setSelectedTask] = useState(\"\");\r\n  const { mutate: updateTasks } = useUpdateHiveTasks();\r\n  const { mutate: addSingleTask } = useAddSingleTasks();\r\n  const [customTask, setCustomTask] = useState({\r\n    name: \"\",\r\n    purpose: \"\",\r\n    description: \"\",\r\n    duration: \"\",\r\n    costPerHour: \"\",\r\n    notes: \"\",\r\n  });\r\n  const [errorMessage, setErrorMessage] = useState(\"\");\r\n\r\n  // Обробник зміни полів введення для власного завдання\r\n  const handleCustomTaskChange = (e) => {\r\n    setCustomTask({\r\n      ...customTask,\r\n      [e.target.name]: e.target.value,\r\n    });\r\n  };\r\n\r\n  // Перевірка на заповнення всіх полів\r\n  const validateCustomTaskFields = () => {\r\n    const { name, purpose, description, duration, costPerHour } = customTask;\r\n    if (!name || !purpose || !description || !duration || !costPerHour) {\r\n      setErrorMessage(\"Будь ласка, заповніть усі обов'язкові поля.\");\r\n      return false;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  // Функція для додавання обраного завдання\r\n  const handleAddTask = () => {\r\n    if (selectedTask === \"custom\") {\r\n      const unifiedTask = unifyTask(customTask, hiveId);\r\n      if (!validateCustomTaskFields()) return;\r\n      // Якщо обране власне завдання\r\n      // addSingleTask({\r\n      //   hiveId: hiveId,\r\n      //   task: unifiedTask,\r\n      // });\r\n      dispatch(addTaskToHive({ hiveId, newTask: unifiedTask }));\r\n    } else {\r\n      // Якщо обране завдання зі списку\r\n      const task = beekeepingTasks.find((t) => t.name === selectedTask);\r\n      console.log(task);\r\n\r\n      if (task) {\r\n        const unifiedTask = unifyTask(task, hiveId);\r\n        console.log(unifiedTask);\r\n\r\n        // addTaskToTable((prevTasks) => [unifiedTask, ...prevTasks]); // Викликаємо функцію, щоб додати завдання у таблицю\r\n        // addSingleTask({\r\n        //   hiveId: hiveId,\r\n        //   task: unifiedTask,\r\n        // });\r\n        dispatch(addTaskToHive({ hiveId, newTask: unifiedTask }));\r\n      }\r\n    }\r\n    // Очистити стан після додавання\r\n    setSelectedTask(\"\");\r\n    setCustomTask({\r\n      name: \"\",\r\n      purpose: \"\",\r\n      description: \"\",\r\n      duration: \"\",\r\n      costPerHour: \"\",\r\n      notes: \"\",\r\n    });\r\n    setErrorMessage(\"\"); // Очистити повідомлення про помилку після успішного додавання\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <label htmlFor=\"taskSelect\">Виберіть завдання: </label>\r\n      <select\r\n        id=\"taskSelect\"\r\n        value={selectedTask}\r\n        onChange={(e) => setSelectedTask(e.target.value)}\r\n      >\r\n        <option value=\"\" disabled>\r\n          Виберіть завдання\r\n        </option>\r\n        {beekeepingTasks.map((task) => (\r\n          <option key={task.name} value={task.name}>\r\n            {task.name}\r\n          </option>\r\n        ))}\r\n        <option value=\"custom\">Створити власне завдання</option>\r\n      </select>\r\n      {/* Рендеримо форму для створення власного завдання, якщо вибраний пункт \"Створити власне завдання\" */}\r\n      {selectedTask === \"custom\" && (\r\n        <CustomTaskForm\r\n          customTask={customTask}\r\n          handleCustomTaskChange={handleCustomTaskChange}\r\n          handleAddTask={handleAddTask}\r\n          errorMessage={errorMessage}\r\n        />\r\n      )}\r\n      {selectedTask !== \"custom\" && (\r\n        <button onClick={handleAddTask}>Додати завдання</button>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","import { useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nimport { selectTasksByStatus } from \"../../redux/selectors\";\r\n\r\nexport const TaskFilter = ({\r\n  hiveId,\r\n  handleFilter,\r\n  handleRequiredTasks,\r\n  useRequiredTasks,\r\n}) => {\r\n  const [activeFilter, setActiveFilter] = useState(null);\r\n  const approvedTasks = useSelector((state) =>\r\n    selectTasksByStatus(state, hiveId, \"Approved\")\r\n  );\r\n  const doneTasks = useSelector((state) =>\r\n    selectTasksByStatus(state, hiveId, \"Done\")\r\n  );\r\n  const reviewTasks = useSelector((state) =>\r\n    selectTasksByStatus(state, hiveId, \"Under Review\")\r\n  );\r\n\r\n  const handleButtonClick = (filterName, tasks) => {\r\n    setActiveFilter(filterName); // Змінюємо активний фільтр\r\n    handleFilter(tasks); // Викликаємо передану функцію фільтрації\r\n  };\r\n\r\n  const buttonStyle = (filterName) =>\r\n    filterName === activeFilter\r\n      ? { backgroundColor: \"blue\", color: \"white\" } // Активний фільтр\r\n      : { backgroundColor: \"white\", color: \"black\" }; // Неактивний фільтр\r\n\r\n  return (\r\n    <div>\r\n      <button\r\n        onClick={() => {\r\n          handleRequiredTasks();\r\n          setActiveFilter(null); // Скидаємо активний фільтр\r\n        }}\r\n        style={buttonStyle(null)}\r\n      >{`All required ${\r\n        useRequiredTasks ? \"+\" : \"-\"\r\n      } other possible tasks`}</button>\r\n\r\n      <button\r\n        onClick={() => handleButtonClick(\"Approved\", approvedTasks)}\r\n        style={buttonStyle(\"Approved\")}\r\n      >\r\n        Approved\r\n      </button>\r\n\r\n      <button\r\n        onClick={() => handleButtonClick(\"Done\", doneTasks)}\r\n        style={buttonStyle(\"Done\")}\r\n      >\r\n        Done\r\n      </button>\r\n\r\n      <button\r\n        onClick={() => handleButtonClick(\"Under Review\", reviewTasks)}\r\n        style={buttonStyle(\"Under Review\")}\r\n      >\r\n        Under Review\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n","import natAvatar from \"../images/avatars/nat.png\";\r\nimport yarAvatar from \"../images/avatars/yar.png\";\r\n\r\nexport const executors = [\r\n  { id: 1, name: \"Nataly\", avatar: natAvatar },\r\n  { id: 2, name: \"Yaroslav\", avatar: yarAvatar },\r\n  { id: 3, name: \"Executor 3\", avatar: null }, // Відсутня аватарка\r\n  // Додаткові виконавці\r\n];\r\n","import React, { useState, useEffect, useCallback } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nimport { TaskSelector } from \"../taskSelector/TaskSelector\";\r\nimport { TaskFilter } from \"../taskFilter/TaskFilter\";\r\nimport { useUpdateHiveTasks } from \"../../hooks/useHives\";\r\nimport { updateTasksStatus } from \"../../redux/hivesSlice\";\r\nimport { executors } from \"../../constants/executors\"; // Імпортуємо масив виконавців\r\nimport placeholderAvatar from \"../../images/avatars/defaultAvatar.jpg\"; // Заглушка для аватарок\r\n\r\nexport const TaskTable = React.memo(\r\n  ({\r\n    tasks,\r\n    onConfirmTask,\r\n    onDeleteTask,\r\n    currentMonth,\r\n    hiveId,\r\n    onPlannedTasksTotalCostChange,\r\n    handleRequiredTasks,\r\n    useRequiredTasks,\r\n  }) => {\r\n    const { mutate: updateTasks } = useUpdateHiveTasks();\r\n    const dispatch = useDispatch();\r\n    const [tempDate, setTempDate] = useState({});\r\n    const [selectedExecutor, setSelectedExecutor] = useState({});\r\n    const [newNotes, setNewNotes] = useState({});\r\n    const [filteredTasks, setFilteredTasks] = useState(tasks);\r\n\r\n    const handleDateChange = (taskId, newDate) => {\r\n      if (isDateValid(newDate)) {\r\n        setTempDate({ ...tempDate, [taskId]: newDate });\r\n      } else {\r\n        alert(\"Виберіть дату не пізніше ніж за 24 години до початку!\");\r\n      }\r\n    };\r\n\r\n    const handleFilterChange = (tasks) => {\r\n      setFilteredTasks(tasks);\r\n    };\r\n\r\n    const handleExecutorChange = (taskId, executor) => {\r\n      setSelectedExecutor({ ...selectedExecutor, [taskId]: executor });\r\n    };\r\n\r\n    const handleNotesChange = (taskId, note) => {\r\n      setNewNotes({ ...newNotes, [taskId]: note || \" \" });\r\n    };\r\n\r\n    const handleDateBlur = (taskId, property, newValue, e) => {\r\n      e.preventDefault();\r\n\r\n      // Find the task to update\r\n      const getTask = tasks.find((task) => task.id === taskId);\r\n\r\n      if (getTask) {\r\n        // Create a new updated task object\r\n        if (property === \"plannedDate\" && !isDateValid(newValue)) {\r\n          return;\r\n        } else {\r\n          const updatedTask = {\r\n            ...getTask,\r\n            [property]: newValue, // Update the specified property\r\n          };\r\n\r\n          // Dispatch the updated task to update the state\r\n          dispatch(updateTasksStatus({ hiveId, updatedTask })); // оновлюємо redux\r\n          const updatedTasks = tasks.filter((t) => t.status !== \"Pending\");\r\n          updateTasks({ hiveId, updatedTasks }); // оновлюємо firestore\r\n        }\r\n      } else {\r\n        console.error(\"Task not found\");\r\n      }\r\n    };\r\n\r\n    const isDateValid = (date) => {\r\n      const currentDate = new Date();\r\n      const selectedDate = new Date(date);\r\n      return selectedDate - currentDate > 24 * 60 * 60 * 1000; // 24 години в мілісекундах\r\n    };\r\n\r\n    const getTotalCost = useCallback(() => {\r\n      return tasks.reduce((total, task) => {\r\n        if (task.status === \"Done\") {\r\n          return total; // Пропускаємо завдання зі статусом \"Done\"\r\n        }\r\n        return total + (task.cost || 0);\r\n      }, 0);\r\n    }, [tasks]);\r\n\r\n    useEffect(() => {\r\n      setFilteredTasks(tasks);\r\n      onPlannedTasksTotalCostChange(getTotalCost()); // Передаємо нове значення загальної вартості\r\n    }, [tasks, onPlannedTasksTotalCostChange, getTotalCost]);\r\n\r\n    return (\r\n      <>\r\n        <h3>Планові роботи на {currentMonth} місяць</h3>\r\n        <TaskFilter\r\n          hiveId={hiveId}\r\n          handleFilter={handleFilterChange}\r\n          handleRequiredTasks={handleRequiredTasks}\r\n          useRequiredTasks={useRequiredTasks}\r\n        />\r\n        <TaskSelector hiveId={hiveId} />\r\n        {filteredTasks.length > 0 ? (\r\n          <table>\r\n            <thead>\r\n              <tr>\r\n                <th>Task</th>\r\n                <th>Description</th>\r\n                <th>Duration, min</th>\r\n                <th>Date & Time</th>\r\n                <th>Cost, $</th>\r\n                <th>Executor</th>\r\n                <th>Notes</th>\r\n                <th>Status</th>\r\n                <th>Action</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {filteredTasks.map((task) => (\r\n                <tr key={task.id}>\r\n                  <td>{task.name}</td>\r\n                  <td>{task.description}</td>\r\n                  <td>{task.duration}</td>\r\n                  <td>\r\n                    {task.status !== \"Done\" &&\r\n                    task.status !== \"Under Review\" ? (\r\n                      <input\r\n                        type=\"datetime-local\"\r\n                        value={tempDate[task.id] || task.plannedDate || \"\"}\r\n                        onChange={(e) => {\r\n                          handleDateChange(task.id, e.target.value);\r\n                          handleDateBlur(\r\n                            task.id,\r\n                            \"plannedDate\",\r\n                            e.target.value,\r\n                            e\r\n                          );\r\n                        }}\r\n                      />\r\n                    ) : (\r\n                      <span>{task.plannedDate}</span>\r\n                    )}\r\n                  </td>\r\n                  <td>{task.cost.toFixed(2)}</td>\r\n                  <td>\r\n                    {task.status !== \"Done\" &&\r\n                    task.status !== \"Under Review\" ? (\r\n                      <div\r\n                        style={{\r\n                          display: \"flex\",\r\n                          flexDirection: \"row-reverse\",\r\n                          gap: \"5px\",\r\n                        }}\r\n                      >\r\n                        <select\r\n                          value={\r\n                            selectedExecutor[task.id] || task.executor || \"\"\r\n                          }\r\n                          onChange={(e) => {\r\n                            e.preventDefault();\r\n                            handleExecutorChange(task.id, e.target.value);\r\n                            handleDateBlur(\r\n                              task.id,\r\n                              \"executor\",\r\n                              e.target.value,\r\n                              e\r\n                            );\r\n                          }}\r\n                        >\r\n                          <option value=\"\" disabled>\r\n                            Select Executor\r\n                          </option>\r\n                          {executors.map((executor) => (\r\n                            <option key={executor.id} value={executor.name}>\r\n                              {executor.name}\r\n                            </option>\r\n                          ))}\r\n                          <option value=\"Self\">Self</option>\r\n                        </select>\r\n                        <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n                          <img\r\n                            src={\r\n                              executors.find(\r\n                                (ex) =>\r\n                                  ex.name ===\r\n                                  (selectedExecutor[task.id] || task.executor)\r\n                              )?.avatar || placeholderAvatar\r\n                            }\r\n                            alt=\"Executor Avatar\"\r\n                            style={{\r\n                              width: \"30px\",\r\n                              height: \"30px\",\r\n                              borderRadius: \"50%\",\r\n                              marginLeft: \"8px\",\r\n                            }}\r\n                          />\r\n                        </div>\r\n                      </div>\r\n                    ) : (\r\n                      <div\r\n                        style={{\r\n                          display: \"flex\",\r\n                          alignItems: \"center\",\r\n                          gap: \"8px\",\r\n                        }}\r\n                      >\r\n                        <img\r\n                          src={\r\n                            executors.find((ex) => ex.name === task.executor)\r\n                              ?.avatar || placeholderAvatar\r\n                          }\r\n                          alt=\"Executor Avatar\"\r\n                          style={{\r\n                            width: \"30px\",\r\n                            height: \"30px\",\r\n                            borderRadius: \"50%\",\r\n                          }}\r\n                        />\r\n                        <span>{task.executor}</span>\r\n                      </div>\r\n                    )}\r\n                  </td>\r\n                  <td>\r\n                    <textarea\r\n                      value={newNotes[task.id] || task.notes || \"\"}\r\n                      onChange={(e) =>\r\n                        handleNotesChange(task.id, e.target.value)\r\n                      }\r\n                      onBlur={(e) =>\r\n                        handleDateBlur(task.id, \"notes\", e.target.value, e)\r\n                      }\r\n                      disabled={task.status === \"Under Review\"}\r\n                    />\r\n                  </td>\r\n                  <td>{task.status}</td>\r\n                  <td>\r\n                    {task.status !== \"Done\" &&\r\n                      task.status !== \"Under Review\" && (\r\n                        <button\r\n                          onClick={() =>\r\n                            isDateValid(task.plannedDate)\r\n                              ? onConfirmTask(task.id)\r\n                              : alert(\"я ж прошу, вибери нормальну дату\")\r\n                          }\r\n                          disabled={task.selectedExecutor === null}\r\n                        >\r\n                          Confirm\r\n                        </button>\r\n                      )}\r\n                    {task.status !== \"Done\" &&\r\n                      task.status !== \"Under Review\" && (\r\n                        <button\r\n                          onClick={() => onDeleteTask(task.id)}\r\n                          disabled={task.priority === \"обов'язкова\"}\r\n                        >\r\n                          Delete\r\n                        </button>\r\n                      )}\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n              <tr>\r\n                <td colSpan=\"5\" style={{ fontWeight: \"bold\" }}>\r\n                  Total Cost:\r\n                </td>\r\n                <td style={{ fontWeight: \"bold\" }}>\r\n                  ${getTotalCost().toFixed(2)}\r\n                </td>\r\n                <td colSpan=\"3\"></td>\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n        ) : (\r\n          <p>No required tasks for this month</p>\r\n        )}\r\n      </>\r\n    );\r\n  },\r\n  (prevProps, nextProps) => prevProps.tasks === nextProps.tasks\r\n);\r\n","export const ageOfQueen = (dateOfBirthd) => {\r\n  const today = new Date(); // Поточна дата\r\n  const birthDate = new Date(dateOfBirthd); // Дата народження\r\n\r\n  // Обчислюємо різницю в роках і місяцях\r\n  const yearsDiff = today.getFullYear() - birthDate.getFullYear();\r\n  const monthsDiff = today.getMonth() - birthDate.getMonth();\r\n\r\n  // Загальна кількість місяців з урахуванням років і місяців\r\n  let ageInMonths = yearsDiff * 12 + monthsDiff;\r\n\r\n  // Якщо день народження ще не настав цього місяця, зменшуємо на 1 місяць\r\n  if (today.getDate() < birthDate.getDate()) {\r\n    ageInMonths--;\r\n  }\r\n\r\n  return ageInMonths;\r\n};\r\n","import styled from \"styled-components\";\r\n\r\nexport const SwiperWrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  margin-bottom: 10px;\r\n`;\r\n\r\nexport const MainSwiperWrapper = styled.div`\r\n  width: 400px;\r\n  height: auto;\r\n`;\r\n\r\nexport const ThumbSwiperWrapper = styled.div`\r\n  width: 600px;\r\n  margin-top: 10px;\r\n`;\r\n\r\nexport const SwiperImage = styled.img`\r\n  width: 70%;\r\n  height: 70%;\r\n  object-fit: cover;\r\n  display: block; /* Встановлюємо block, щоб працював margin */\r\n  margin: 0 auto; /* Центруємо зображення */\r\n`;\r\n\r\nexport const ThumbImage = styled.img`\r\n  width: 100%;\r\n  height: auto;\r\n`;\r\n\r\nexport const ModalImage = styled.img`\r\n  max-width: 90vw; /* Зображення займає 90% ширини екрану */\r\n  max-height: 90vh; /* Зображення займає 90% висоти екрану */\r\n  object-fit: contain;\r\n  display: block;\r\n  margin: 0 auto;\r\n  transition: transform 0.3s ease; /* Додаємо анімацію при масштабуванні */\r\n  cursor: grab; /* Змінюємо курсор на \"grab\" для вказівки, що зображення можна перетягувати */\r\n\r\n  &:hover {\r\n    cursor: grabbing; /* Змінюємо курсор на \"grabbing\" при наведенні */\r\n  }\r\n`;\r\n\r\nexport const ImageContainer = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  position: relative; /* Для абсолютного позиціонування зображення */\r\n  height: 100%; /* Встановлюємо висоту контейнера */\r\n  overflow: hidden; /* Сховати частини зображення, які виходять за межі контейнера */\r\n`;\r\n\r\nexport const Description = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  max-width: 370px;\r\n  margin: auto;\r\n`;\r\n\r\nexport const Wrapper = styled.div`\r\n  text-align: left;\r\n  margin: 0 auto 20px auto;\r\n  max-width: 370px;\r\n`;\r\n","import { useState, useEffect, useMemo } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nimport { Swiper, SwiperSlide } from \"swiper/react\";\r\nimport { Navigation, Thumbs } from \"swiper/modules\"; // Підключаємо модулі Navigation і Thumbs\r\n\r\nimport \"swiper/swiper-bundle.css\";\r\nimport { Modal } from \"../modal/Modal\";\r\nimport { PerformanceScale } from \"../performanceScale/PerformanceScale\";\r\nimport { RentInfo } from \"../rentInfo/RentInfo\";\r\nimport { TaskTable } from \"../taskTable/TaskTable\";\r\nimport { useLockBodyScroll } from \"../../hooks/useLockBodyScroll\";\r\nimport { Button } from \"../button/Button\";\r\nimport { ContractModal } from \"../сontractModal/ContractModal\";\r\nimport { useUpdateHiveTasks, useDeleteHiveTask } from \"../../hooks/useHives\";\r\nimport {\r\n  updateAgreeWithBasicTech,\r\n  updateAdditionalService,\r\n  updateHiveProperty,\r\n  updateProfile,\r\n} from \"../../redux/operations\";\r\nimport {\r\n  updateTasksStatus,\r\n  removeTaskFromHive,\r\n  updateHiveTasks,\r\n  updateHive,\r\n} from \"../../redux/hivesSlice\";\r\nimport {\r\n  selectHiveById,\r\n  selectIsLoading,\r\n  selectError,\r\n  selectUserProfile,\r\n  selectPlannedTasksCost,\r\n} from \"../../redux/selectors\";\r\nimport { ageOfQueen } from \"../../helpers/ageOfQueen\";\r\nimport { calculatePerformance } from \"../../helpers/calculatePerformance\";\r\nimport { calculateTotalRent } from \"../../helpers/calculateRent\";\r\nimport {\r\n  generateTasksForMonth,\r\n  generateMissingTasks,\r\n} from \"../../helpers/generateTasksForMonth\";\r\nimport { calculateMandatoryTasksCost } from \"../../helpers/calculateMandatoryTasksCost\";\r\n\r\nimport {\r\n  SwiperWrapper,\r\n  MainSwiperWrapper,\r\n  ThumbSwiperWrapper,\r\n  SwiperImage,\r\n  ThumbImage,\r\n  ModalImage,\r\n  ImageContainer,\r\n  Description,\r\n  Wrapper,\r\n} from \"./BeeHiveCard.styled\";\r\n\r\nexport const BeeHiveCard = () => {\r\n  // const currentMonth = new Date().toLocaleString(\"uk-UA\", { month: \"long\" });\r\n  const currentMonth = \"червень\";\r\n  const user = JSON.parse(localStorage.getItem(\"user\"));\r\n  const hiveId = useParams();\r\n  const dispatch = useDispatch();\r\n  const hive = useSelector((state) => selectHiveById(state, hiveId.hiveId));\r\n  const isLoading = useSelector(selectIsLoading);\r\n  const error = useSelector(selectError);\r\n  const { mutate: updateTasks } = useUpdateHiveTasks();\r\n  const { mutate: deleteTask } = useDeleteHiveTask();\r\n  const [thumbsSwiper, setThumbsSwiper] = useState(null);\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n  const [isContractModalOpen, setIsContractModalOpen] = useState(false);\r\n  const [activeImage, setActiveImage] = useState(null);\r\n  const [isDragging, setIsDragging] = useState(false);\r\n  const [startPosition, setStartPosition] = useState({ x: 0, y: 0 });\r\n  const [offset, setOffset] = useState({ x: 0, y: 0 });\r\n  const [plannedTasksTotalCost, setPlannedTasksTotalCost] = useState(0);\r\n  const [useRequiredTasks, setUseRequiredTasks] = useState(true);\r\n  const [contractType, setContractType] = useState(null);\r\n  const userProfile = useSelector(selectUserProfile);\r\n  const plannedTasksCost = useSelector(selectPlannedTasksCost);\r\n\r\n  const selectedServices = useMemo(() => {\r\n    const services = Object.entries(hive.additionalServices)\r\n      .filter(([_, isSelected]) => isSelected) // Враховуються лише обрані сервіси\r\n      .map(([service]) => service);\r\n\r\n    if (hive.agreeWithBasicTech) {\r\n      services.push(\"honey\"); // Додається сервіс honey\r\n    }\r\n\r\n    return services;\r\n  }, [hive.additionalServices, hive.agreeWithBasicTech]); // Додано залежність `agreeWithBasicTech`\r\n\r\n  useEffect(\r\n    () => {\r\n      const requiredTasks = generateTasksForMonth(\r\n        currentMonth,\r\n        hiveId.hiveId,\r\n        selectedServices\r\n      ); // Завдання для поточного місяця\r\n\r\n      const missingTasks = generateMissingTasks(\r\n        hive.tasks,\r\n        requiredTasks,\r\n        currentMonth,\r\n        hiveId.hiveId\r\n      );\r\n\r\n      if (useRequiredTasks) {\r\n        const ttasks = [...hive.tasks, ...missingTasks];\r\n        const newTasks = ttasks.filter((task) => {\r\n          const matchesSelectedServices =\r\n            Array.isArray(task.purpose) &&\r\n            task.purpose.length > 0 &&\r\n            task.purpose.some((purpose) => selectedServices.includes(purpose));\r\n\r\n          return (\r\n            task.status !== \"Pending\" ||\r\n            task.priority === \"обов'язкова\" ||\r\n            matchesSelectedServices\r\n          );\r\n        });\r\n        dispatch(updateHiveTasks({ hiveId: hiveId.hiveId, newTasks }));\r\n      } else {\r\n        console.log(\"All tasks for the current month are already present.\");\r\n        const newTasks = [...hive.tasks, ...missingTasks];\r\n        dispatch(updateHiveTasks({ hiveId: hiveId.hiveId, newTasks }));\r\n      }\r\n    },\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    [\r\n      currentMonth,\r\n      dispatch,\r\n      hiveId.hiveId,\r\n      useRequiredTasks,\r\n      hive.additionalServices, // Залежність доданого/знятного сервісу\r\n      hive.agreeWithBasicTech,\r\n    ]\r\n  );\r\n\r\n  const handleRequiredTasks = () => {\r\n    setUseRequiredTasks((prevState) => {\r\n      return !prevState;\r\n    });\r\n  };\r\n\r\n  useLockBodyScroll(isModalOpen);\r\n\r\n  if (isLoading) return <p>Loading...</p>;\r\n  if (error) return <p>Error: {error.message}</p>;\r\n\r\n  const openModal = (image) => {\r\n    setActiveImage(image);\r\n    setIsModalOpen(true);\r\n  };\r\n\r\n  const closeModal = () => {\r\n    setIsModalOpen(false);\r\n    setActiveImage(null);\r\n  };\r\n\r\n  const handleMouseDown = (e) => {\r\n    setIsDragging(true);\r\n    setStartPosition({ x: e.clientX, y: e.clientY });\r\n  };\r\n\r\n  const handleMouseMove = (e) => {\r\n    if (!isDragging) return;\r\n\r\n    const dx = e.clientX - startPosition.x;\r\n    const dy = e.clientY - startPosition.y;\r\n    setOffset((prevOffset) => ({\r\n      x: prevOffset.x + dx,\r\n      y: prevOffset.y + dy,\r\n    }));\r\n    setStartPosition({ x: e.clientX, y: e.clientY }); // Оновлюємо стартову позицію\r\n  };\r\n\r\n  const handleMouseUp = () => {\r\n    setIsDragging(false);\r\n  };\r\n\r\n  const handleBasicTechChange = (e) => {\r\n    dispatch(\r\n      updateAgreeWithBasicTech({\r\n        hiveId: hiveId.hiveId,\r\n        value: e.target.checked,\r\n      })\r\n    );\r\n  };\r\n\r\n  const handleAdditionalServiceChange = (e) => {\r\n    const { name, checked } = e.target;\r\n    dispatch(\r\n      updateAdditionalService({\r\n        hiveId: hiveId.hiveId,\r\n        service: name,\r\n        value: checked,\r\n      })\r\n    );\r\n  };\r\n\r\n  const performance = calculatePerformance(hive);\r\n\r\n  const handleConfirmTask = (taskId) => {\r\n    console.log(hive.lessee.uid === userProfile.id);\r\n\r\n    if (hive.lessee.uid !== userProfile.id) {\r\n      alert(\"Вам потрібно оформити договір оренди на цей вулик\");\r\n      return;\r\n    }\r\n    const currentTask = hive.tasks.find((task) => task.id === taskId);\r\n    if (!currentTask) {\r\n      console.error(\"Завдання не знайдено\");\r\n      return;\r\n    }\r\n\r\n    const remainingBalance = userProfile.balance - plannedTasksCost;\r\n\r\n    if (\r\n      currentTask.status !== \"Approved\" &&\r\n      remainingBalance < currentTask.cost\r\n    ) {\r\n      alert(\r\n        \"Недостатньо коштів на балансі для виконання цього завдання. Будь ласка, поповніть баланс.\"\r\n      );\r\n      return;\r\n    }\r\n    const tasksToUpdate = hive.tasks\r\n      .filter((task) => task.status !== \"Pending\" || task.id === taskId)\r\n      .map((task) =>\r\n        task.id === taskId ? { ...task, status: \"Under Review\" } : task\r\n      );\r\n\r\n    const taskToConfirmation = tasksToUpdate.filter(\r\n      (task) => task.id === taskId\r\n    );\r\n\r\n    // setTasks(taskToUpdate); // Оновлюємо стан завдань\r\n    updateTasks({ hiveId: hiveId.hiveId, tasks: tasksToUpdate }); // Оновлюємо Firestore\r\n    dispatch(\r\n      updateTasksStatus({\r\n        hiveId: hiveId.hiveId,\r\n        updatedTask: taskToConfirmation[0],\r\n      })\r\n    );\r\n  };\r\n\r\n  // Функція для видалення завдання\r\n  const handleDeleteTask = (taskId) => {\r\n    // Фільтруємо завдання, видаляючи вибране\r\n    const updatedTasks = hive.tasks.filter(\r\n      (task) => task.id !== taskId && task.status !== \"Pending\"\r\n    );\r\n    // Оновлюємо Firestore, передаючи оновлений масив tasks\r\n    deleteTask({ hiveId: hiveId.hiveId, tasks: updatedTasks });\r\n    // Оновлюємо локальний стан\r\n    dispatch(removeTaskFromHive({ hiveId: hiveId.hiveId, taskId }));\r\n  };\r\n\r\n  const handleOpenContractModal = (contractType) => {\r\n    setContractType(contractType);\r\n    setIsContractModalOpen(true);\r\n  };\r\n\r\n  const handleCloseContractModal = () => {\r\n    setIsContractModalOpen(false);\r\n  };\r\n\r\n  const contractText = `\r\n    Договір оренди вулика та бджолосім'ї...\r\n    Орендодавець: __________\r\n    Орендар: __________\r\n    Вартість оренди: __________\r\n    Заплановані роботи: __________\r\n    Умови договору: __________\r\n  `;\r\n\r\n  const handleSignContract = (contractType) => {\r\n    try {\r\n      const today = new Date();\r\n      const startDate = today.toISOString().split(\"T\")[0]; // Поточна дата у форматі YYYY-MM-DD\r\n      let endDate;\r\n      let totalCost;\r\n      const monthsLeft = 8 - today.getMonth(); // Кількість місяців до кінця серпня\r\n\r\n      if (contractType === \"monthly\") {\r\n        // Отримуємо останній день поточного місяця\r\n        const lastDayOfMonth = new Date(\r\n          Date.UTC(today.getFullYear(), today.getMonth() + 1, 0)\r\n        );\r\n        endDate = lastDayOfMonth.toISOString().split(\"T\")[0];\r\n        totalCost = totalRent + plannedTasksTotalCost;\r\n      } else if (contractType === \"seasonal\") {\r\n        // 31 серпня поточного року\r\n        endDate = new Date(Date.UTC(today.getFullYear(), 7, 31))\r\n          .toISOString()\r\n          .split(\"T\")[0];\r\n\r\n        totalCost = totalRent * monthsLeft + calculateMandatoryTasksCost();\r\n      }\r\n\r\n      // Перевірка балансу\r\n      if (userProfile.balance < totalCost) {\r\n        const deficit = totalCost - userProfile.balance;\r\n        alert(\r\n          `Недостатньо коштів! Поповніть баланс на ${deficit.toFixed(2)} грн.`\r\n        );\r\n        return;\r\n      }\r\n\r\n      const newBalance = parseFloat(\r\n        userProfile.balance -\r\n          (contractType === \"monthly\"\r\n            ? totalRent\r\n            : totalRent * monthsLeft\r\n          ).toFixed(2)\r\n      );\r\n\r\n      // Оновлення Firestore\r\n      dispatch(\r\n        updateHiveProperty({\r\n          hiveId: hiveId.hiveId,\r\n          property: \"lessee\",\r\n          value: {\r\n            uid: user.uid,\r\n            startDate,\r\n            endDate,\r\n            type: contractType,\r\n          },\r\n        })\r\n      );\r\n\r\n      // Оновлення локального стейту\r\n      dispatch(\r\n        updateHive({\r\n          id: hiveId.hiveId,\r\n          updates: {\r\n            lessee: {\r\n              uid: user.uid,\r\n              startDate,\r\n              endDate,\r\n              type: contractType,\r\n            },\r\n          },\r\n        })\r\n      );\r\n\r\n      // Оновлення балансу через Redux-операцію\r\n      dispatch(\r\n        updateProfile({\r\n          uid: userProfile.id,\r\n          data: { balance: newBalance }, // Передаємо дані в потрібному форматі\r\n        })\r\n      );\r\n\r\n      handleCloseContractModal();\r\n    } catch (error) {\r\n      console.error(\"Помилка підписання договору:\", error);\r\n    }\r\n  };\r\n\r\n  const handlePlannedTasksTotalCostChange = (newTotalCost) => {\r\n    setPlannedTasksTotalCost(newTotalCost);\r\n  };\r\n\r\n  const totalRent = calculateTotalRent(hive.hiveComponents, hive.power);\r\n\r\n  return (\r\n    <>\r\n      <h2 style={{ textAlign: \"center\", marginBottom: \"10px\" }}>\r\n        \"I'm a BeehiveCard\"\r\n      </h2>\r\n      {/* Головний Swiper для великого зображення */}\r\n      <SwiperWrapper>\r\n        <MainSwiperWrapper>\r\n          <Swiper\r\n            modules={[Navigation, Thumbs]}\r\n            spaceBetween={10}\r\n            navigation\r\n            thumbs={{\r\n              swiper:\r\n                thumbsSwiper && !thumbsSwiper.destroyed ? thumbsSwiper : null,\r\n            }}\r\n          >\r\n            {hive.images.map((image, index) => (\r\n              <SwiperSlide key={index}>\r\n                <SwiperImage\r\n                  src={image}\r\n                  alt={`Hive Image ${index + 1}`}\r\n                  onClick={() => openModal(image)} // Відкриваємо модальне вікно при кліку\r\n                />\r\n              </SwiperSlide>\r\n            ))}\r\n          </Swiper>\r\n        </MainSwiperWrapper>\r\n\r\n        {/* Swiper для мініатюр */}\r\n        <ThumbSwiperWrapper>\r\n          <Swiper\r\n            modules={[Thumbs]}\r\n            onSwiper={setThumbsSwiper}\r\n            spaceBetween={10}\r\n            slidesPerView={5}\r\n            watchSlidesProgress\r\n          >\r\n            {hive.images.map((image, index) => (\r\n              <SwiperSlide key={index}>\r\n                <ThumbImage src={image} alt={`Thumbnail ${index + 1}`} />\r\n              </SwiperSlide>\r\n            ))}\r\n          </Swiper>\r\n        </ThumbSwiperWrapper>\r\n      </SwiperWrapper>\r\n\r\n      {/* Модальне вікно для великого зображення */}\r\n      <Modal isOpen={isModalOpen} onClose={closeModal}>\r\n        <ImageContainer\r\n          onMouseDown={handleMouseDown}\r\n          onMouseMove={handleMouseMove}\r\n          onMouseUp={handleMouseUp}\r\n          onMouseLeave={handleMouseUp} // Зупиняємо перетягування при виході курсора з області\r\n        >\r\n          <ModalImage\r\n            src={activeImage}\r\n            alt=\"Original Size\"\r\n            style={{\r\n              transform: `scale(2.2) translate(${offset.x}px, ${offset.y}px)`, // Застосовуємо масштаб і зміщення\r\n            }}\r\n          />\r\n        </ImageContainer>\r\n      </Modal>\r\n      <Description>\r\n        <h4>hive system: {hive.system}</h4>\r\n        <h4>the power of the colony: {hive.power} рамок</h4>\r\n        <h4>breed: {hive.breed}</h4>\r\n        <h4>\r\n          the age of the queen bee: {ageOfQueen(hive.queensBirthday)} місяців\r\n        </h4>\r\n      </Description>\r\n      <div style={{ textAlign: \"center\", marginTop: \"20px\" }}>\r\n        <label>\r\n          <input\r\n            type=\"checkbox\"\r\n            checked={hive.agreeWithBasicTech}\r\n            onChange={handleBasicTechChange}\r\n          />\r\n          Погоджуюсь застосовувати Базову технологію бджільництва\r\n        </label>\r\n      </div>\r\n\r\n      {/* Виводимо поточний стан чекбоксу */}\r\n      <p style={{ textAlign: \"center\", margin: \"10px 0 20px 0\" }}>\r\n        {hive.agreeWithBasicTech\r\n          ? \"Ви погодились застосовувати Базову технологію бджільництва\"\r\n          : \"Ви ще не погодились застосовувати Базову технологію бджільництва\"}\r\n      </p>\r\n      <PerformanceScale hive={hive} />\r\n      {/* Група чекбоксів для додаткових послуг */}\r\n      <Wrapper>\r\n        <h3 style={{ marginBottom: \"20px\" }}>Додаткові послуги:</h3>\r\n        <div style={{ marginBottom: \"10px\" }}>\r\n          <label>\r\n            <input\r\n              type=\"checkbox\"\r\n              name=\"pollen\"\r\n              checked={hive.additionalServices.pollen}\r\n              onChange={handleAdditionalServiceChange}\r\n            />\r\n            Пилок\r\n          </label>\r\n        </div>\r\n        <div style={{ marginBottom: \"10px\" }}>\r\n          <label>\r\n            <input\r\n              type=\"checkbox\"\r\n              name=\"propolis\"\r\n              checked={hive.additionalServices.propolis}\r\n              onChange={handleAdditionalServiceChange}\r\n            />\r\n            Прополіс\r\n          </label>\r\n        </div>\r\n        <div style={{ marginBottom: \"10px\" }}>\r\n          <label>\r\n            <input\r\n              type=\"checkbox\"\r\n              name=\"wax\"\r\n              checked={hive.additionalServices.wax}\r\n              onChange={handleAdditionalServiceChange}\r\n            />\r\n            Віск\r\n          </label>\r\n        </div>\r\n        <div style={{ marginBottom: \"10px\" }}>\r\n          <label>\r\n            <input\r\n              type=\"checkbox\"\r\n              name=\"royalJelly\"\r\n              checked={hive.additionalServices.royalJelly}\r\n              onChange={handleAdditionalServiceChange}\r\n            />\r\n            Маточне молочко\r\n          </label>\r\n        </div>\r\n        <div style={{ marginBottom: \"10px\" }}>\r\n          <label>\r\n            <input\r\n              type=\"checkbox\"\r\n              name=\"droneHomogenate\"\r\n              checked={hive.additionalServices.droneHomogenate}\r\n              onChange={handleAdditionalServiceChange}\r\n            />\r\n            Трутневий гомогенат\r\n          </label>\r\n        </div>\r\n        <div style={{ marginBottom: \"10px\" }}>\r\n          <label>\r\n            <input\r\n              type=\"checkbox\"\r\n              name=\"beeVenom\"\r\n              checked={hive.additionalServices.beeVenom}\r\n              onChange={handleAdditionalServiceChange}\r\n            />\r\n            Бджолина отрута (сирець)\r\n          </label>\r\n        </div>\r\n      </Wrapper>\r\n\r\n      {/* Виведення стану додаткових послуг */}\r\n      <Wrapper>\r\n        <h4>Обрані послуги:</h4>\r\n        <p>{hive.additionalServices.pollen && \"Пилок\"}</p>\r\n        <p>{hive.additionalServices.propolis && \"Прополіс\"}</p>\r\n        <p>{hive.additionalServices.wax && \"Віск\"}</p>\r\n        <p>{hive.additionalServices.royalJelly && \"Маточне молочко\"}</p>\r\n        <p>\r\n          {hive.additionalServices.droneHomogenate && \"Трутневий гомогенат\"}\r\n        </p>\r\n        <p>{hive.additionalServices.beeVenom && \"Бджолина отрута (сирець)\"}</p>\r\n      </Wrapper>\r\n      <Wrapper>\r\n        <h3\r\n          title=\"Ви отримаєте всю вироблену цією бджолосім'єю продукцію, якої може бути набагато більше, але не менше вказаної продуктивності, яку ми гарантуємо при застосуванні базової технології.\"\r\n          style={{ display: \"inline-block\", cursor: \"pointer\" }}\r\n        >\r\n          Гарантована продуктивність бджолиної сім'ї\r\n          <span style={{ cursor: \"pointer\", color: \"red\", marginLeft: \"5px\" }}>\r\n            *\r\n          </span>\r\n        </h3>\r\n        <p>Мед: {performance.honey} кг</p>\r\n        {<p>Пилок: {performance.pollenAmount} кг</p>}\r\n        {<p>Прополіс: {performance.propolisAmount} кг</p>}\r\n        {<p>Віск: {performance.waxAmount} кг</p>}\r\n        {<p>Маточне молочко: {performance.royalJellyAmount} кг</p>}\r\n        {<p>Трутневий гомогенат: {performance.droneHomogenateAmount} кг</p>}\r\n        {<p>Бджолина отрута (сирець): {performance.beeVenomAmount} кг</p>}\r\n      </Wrapper>\r\n      <RentInfo\r\n        hiveComponents={hive.hiveComponents}\r\n        power={hive.power}\r\n        totalRent={totalRent.toFixed(2)}\r\n      />\r\n\r\n      <TaskTable\r\n        tasks={hive.tasks}\r\n        onConfirmTask={handleConfirmTask}\r\n        onDeleteTask={handleDeleteTask}\r\n        currentMonth={currentMonth}\r\n        hiveId={hiveId.hiveId}\r\n        onPlannedTasksTotalCostChange={handlePlannedTasksTotalCostChange}\r\n        handleRequiredTasks={handleRequiredTasks}\r\n        useRequiredTasks={useRequiredTasks}\r\n      />\r\n      {hive.lessee.uid === \"\" && (\r\n        <>\r\n          <Button\r\n            variant=\"formBtn\" // Вибираємо один з варіантів стилів, наприклад \"formBtn\"\r\n            size=\"large\" // Розмір кнопки, наприклад \"large\"\r\n            onClick={() => handleOpenContractModal(\"monthly\")} // Функція для відкриття модалки\r\n          >\r\n            Оформити договір оренди на наступний місяць ($\r\n            {(totalRent + plannedTasksTotalCost).toFixed(2)})\r\n            <br />\r\n            управління бджолосім'єю онлайн, збір доступних продуктів\r\n            бджільництва\r\n          </Button>\r\n          <Button\r\n            variant=\"formBtn\" // Вибираємо один з варіантів стилів, наприклад \"formBtn\"\r\n            size=\"large\" // Розмір кнопки, наприклад \"large\"\r\n            onClick={() => handleOpenContractModal(\"seasonal\")} // Функція для відкриття модалки\r\n          >\r\n            Оформити договір оренди на повний сезон ($\r\n            {(totalRent * 6 + calculateMandatoryTasksCost()).toFixed(2)})\r\n            <br />\r\n            управління бджолосім'єю онлайн, гарантоване отримання базового\r\n            набору продуктів бджільництва\r\n          </Button>\r\n        </>\r\n      )}\r\n      {/* Модалка для договору */}\r\n      <ContractModal\r\n        isOpen={isContractModalOpen}\r\n        onClose={handleCloseContractModal}\r\n        contractText={contractText}\r\n        onSignContract={handleSignContract}\r\n        contractType={contractType}\r\n      />\r\n    </>\r\n  );\r\n};\r\n","import { useEffect } from \"react\";\r\n\r\n// Хук для блокування прокрутки\r\nexport const useLockBodyScroll = (isLocked) => {\r\n  useEffect(() => {\r\n    if (isLocked) {\r\n      document.body.style.overflow = \"hidden\"; // Блокуємо прокрутку\r\n    } else {\r\n      document.body.style.overflow = \"auto\"; // Відновлюємо прокрутку\r\n    }\r\n\r\n    return () => {\r\n      document.body.style.overflow = \"auto\"; // Відновлюємо при видаленні компонента\r\n    };\r\n  }, [isLocked]);\r\n};\r\n","import { BeeHiveCard } from \"../components/beeHiveCard/BeeHiveCard\";\r\n\r\nconst HiveCard = () => {\r\n  return <BeeHiveCard />;\r\n};\r\n\r\nexport default HiveCard;\r\n"],"names":["RentInfo","_ref","hiveComponents","power","totalRent","_jsx","children","_jsxs","Date","toLocaleString","month","style","position","cursor","title","concat","calculateHiveRent","calculateBeeColonyRent","CustomTaskForm","customTask","handleCustomTaskChange","handleAddTask","errorMessage","color","type","name","value","onChange","purpose","description","duration","costPerHour","notes","onClick","unifyTask","task","hiveId","now","plannedDate","getTime","toISOString","slice","id","uuidv4","cost","status","executor","date","priority","TaskSelector","dispatch","useDispatch","_useState","useState","_useState2","_slicedToArray","selectedTask","setSelectedTask","_useState3","useUpdateHiveTasks","mutate","useAddSingleTasks","_useState4","setCustomTask","_useState5","_useState6","setErrorMessage","unifiedTask","validateCustomTaskFields","addTaskToHive","newTask","beekeepingTasks","t","console","log","htmlFor","e","target","disabled","_objectSpread","_defineProperty","TaskFilter","handleFilter","handleRequiredTasks","useRequiredTasks","activeFilter","setActiveFilter","approvedTasks","useSelector","state","selectTasksByStatus","doneTasks","reviewTasks","handleButtonClick","filterName","tasks","buttonStyle","backgroundColor","executors","avatar","TaskTable","React","onConfirmTask","onDeleteTask","currentMonth","onPlannedTasksTotalCostChange","updateTasks","tempDate","setTempDate","selectedExecutor","setSelectedExecutor","newNotes","setNewNotes","_useState7","_useState8","filteredTasks","setFilteredTasks","handleDateBlur","taskId","property","newValue","preventDefault","getTask","find","isDateValid","updatedTask","updateTasksStatus","updatedTasks","filter","error","currentDate","getTotalCost","useCallback","reduce","total","useEffect","_Fragment","length","map","_executors$find","_executors$find2","newDate","alert","toFixed","display","flexDirection","gap","alignItems","src","ex","placeholderAvatar","alt","width","height","borderRadius","marginLeft","note","onBlur","colSpan","fontWeight","prevProps","nextProps","ageOfQueen","dateOfBirthd","today","birthDate","ageInMonths","getFullYear","getMonth","getDate","SwiperWrapper","styled","_templateObject","_taggedTemplateLiteral","MainSwiperWrapper","_templateObject2","ThumbSwiperWrapper","_templateObject3","SwiperImage","_templateObject4","ThumbImage","_templateObject5","ModalImage","_templateObject6","ImageContainer","_templateObject7","Description","_templateObject8","Wrapper","_templateObject9","BeeHiveCard","user","JSON","parse","localStorage","getItem","useParams","hive","selectHiveById","isLoading","selectIsLoading","selectError","deleteTask","useDeleteHiveTask","thumbsSwiper","setThumbsSwiper","isModalOpen","setIsModalOpen","isContractModalOpen","setIsContractModalOpen","activeImage","setActiveImage","_useState9","_useState10","isDragging","setIsDragging","_useState11","x","y","_useState12","startPosition","setStartPosition","_useState13","_useState14","offset","setOffset","_useState15","_useState16","plannedTasksTotalCost","setPlannedTasksTotalCost","_useState17","_useState18","setUseRequiredTasks","_useState19","_useState20","contractType","setContractType","userProfile","selectUserProfile","plannedTasksCost","selectPlannedTasksCost","selectedServices","useMemo","services","Object","entries","additionalServices","_ref2","_ref3","agreeWithBasicTech","push","requiredTasks","isCurrentMonth","includes","isRequiredTask","matchesSelectedServices","Array","isArray","some","frequency","generateTasksForMonth","missingTasks","currentTasks","forEach","currentTaskCount","requiredCount","tasksToGenerate","i","generateMissingTasks","newTasks","_toConsumableArray","updateHiveTasks","isLocked","document","body","overflow","message","handleMouseUp","handleAdditionalServiceChange","_e$target","checked","updateAdditionalService","service","performance","calculatePerformance","handleOpenContractModal","handleCloseContractModal","calculateTotalRent","textAlign","marginBottom","Swiper","modules","Navigation","Thumbs","spaceBetween","navigation","thumbs","swiper","destroyed","images","image","index","SwiperSlide","openModal","onSwiper","slidesPerView","watchSlidesProgress","Modal","isOpen","onClose","onMouseDown","clientX","clientY","onMouseMove","dx","dy","prevOffset","onMouseUp","onMouseLeave","transform","system","breed","queensBirthday","marginTop","updateAgreeWithBasicTech","margin","PerformanceScale","pollen","propolis","wax","royalJelly","droneHomogenate","beeVenom","honey","pollenAmount","propolisAmount","waxAmount","royalJellyAmount","droneHomogenateAmount","beeVenomAmount","lessee","uid","currentTask","remainingBalance","balance","tasksToUpdate","taskToConfirmation","removeTaskFromHive","newTotalCost","prevState","Button","variant","size","calculateMandatoryTasksCost","ContractModal","contractText","onSignContract","endDate","totalCost","startDate","split","monthsLeft","UTC","deficit","newBalance","parseFloat","updateHiveProperty","updateHive","updates","updateProfile","data"],"sourceRoot":""}