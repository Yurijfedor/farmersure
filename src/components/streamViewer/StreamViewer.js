import { useEffect, useRef, useState } from "react";

export const StreamViewer = () => {
  const videoRef = useRef(null);
  const socket = useRef(null);
  const peerConnection = useRef(null);
  const [socketConnected, setSocketConnected] = useState(false);

  useEffect(() => {
    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è WebSocket
    const protocol = window.location.protocol === "https:" ? "wss" : "ws";
    socket.current = new WebSocket(`${protocol}://192.168.0.103:8080`);

    socket.current.onopen = () => {
      console.log("‚úÖ WebSocket –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ");
      setSocketConnected(true);
    };

    socket.current.onmessage = async (event) => {
      try {
        const message = JSON.parse(event.data);
        console.log("üì© –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ —Å–µ—Ä–≤–µ—Ä–∞:", message);

        if (message.offer) {
          // –û—Ç—Ä–∏–º–∞–Ω–Ω—è offer —Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è answer
          console.log("üé• –û—Ç—Ä–∏–º–∞–Ω–æ offer:", message.offer);

          // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞–Ω—É –ø–µ—Ä–µ–¥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è–º remoteDescription
          if (
            peerConnection.current.signalingState === "stable" ||
            peerConnection.current.signalingState === "have-local-offer"
          ) {
            try {
              await peerConnection.current.setRemoteDescription(
                new RTCSessionDescription(message.offer)
              );
              const answer = await peerConnection.current.createAnswer();
              await peerConnection.current.setLocalDescription(answer);
              socket.current.send(JSON.stringify({ answer }));
            } catch (error) {
              console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ offer:", error);
            }
          } else {
            console.warn(
              "‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Å—Ç–∞–Ω –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ remoteDescription: ",
              peerConnection.current.signalingState
            );
          }
        } else if (message.answer) {
          // –û—Ç—Ä–∏–º–∞–Ω–Ω—è answer
          console.log("üé• –û—Ç—Ä–∏–º–∞–Ω–æ answer:", message.answer);

          if (peerConnection.current.signalingState === "have-local-offer") {
            try {
              await peerConnection.current.setRemoteDescription(
                new RTCSessionDescription(message.answer)
              );
            } catch (error) {
              console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ answer:", error);
            }
          } else {
            console.warn(
              "‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Å—Ç–∞–Ω –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ answer: ",
              peerConnection.current.signalingState
            );
          }
        } else if (message.iceCandidate) {
          // –û—Ç—Ä–∏–º–∞–Ω–Ω—è iceCandidate
          console.log("üßä –û—Ç—Ä–∏–º–∞–Ω–æ iceCandidate:", message.iceCandidate);

          // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å remoteDescription –ø–µ—Ä–µ–¥ –¥–æ–¥–∞–≤–∞–Ω–Ω—è–º iceCandidate
          if (peerConnection.current.remoteDescription) {
            try {
              await peerConnection.current.addIceCandidate(
                new RTCIceCandidate(message.iceCandidate)
              );
            } catch (error) {
              console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ iceCandidate:", error);
            }
          } else {
            console.warn(
              "‚ö†Ô∏è –ù–µ–º–∞—î remoteDescription, iceCandidate –Ω–µ –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏"
            );
          }
        } else {
          console.warn("‚ö†Ô∏è –ù–µ–≤—ñ–¥–æ–º–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:", message);
        }
      } catch (error) {
        console.error(
          "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ —Å–µ—Ä–≤–µ—Ä–∞: ",
          error
        );
      }
    };

    socket.current.onerror = (err) => {
      console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ WebSocket:", err);
    };

    socket.current.onclose = () => {
      console.log("‚ö†Ô∏è WebSocket –∑'—î–¥–Ω–∞–Ω–Ω—è –∑–∞–∫—Ä–∏—Ç–æ");
      setSocketConnected(false); // –Ø–∫—â–æ WebSocket –∑–∞–∫—Ä–∏—Ç–æ, –∑–º—ñ–Ω—é—î–º–æ —Å—Ç–∞–Ω
    };

    // –û—á–∏—â–µ–Ω–Ω—è –ø—Ä–∏ –¥–µ–º–æ–Ω—Ç–æ–≤–∞–Ω–æ–º—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ
    return () => {
      if (socket.current) {
        socket.current.close();
      }
      if (peerConnection.current) {
        peerConnection.current.close();
      }
    };
  }, []); // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è WebSocket –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –ª–∏—à–µ –æ–¥–∏–Ω —Ä–∞–∑

  useEffect(() => {
    if (socketConnected) {
      // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è WebRTC –ø—Ä–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—ñ WebSocket
      peerConnection.current = new RTCPeerConnection({
        iceServers: [{ urls: "stun:stun.l.google.com:19302" }],
      });

      // –ù–∞–¥—Å–∏–ª–∞—î–º–æ offer –ø—Ä–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—ñ WebSocket
      const sendOffer = async () => {
        try {
          const offer = await peerConnection.current.createOffer();
          await peerConnection.current.setLocalDescription(offer);
          socket.current.send(JSON.stringify({ offer }));
          console.log("üé• –ù–∞–¥—Å–∏–ª–∞—î–º–æ –Ω–æ–≤–∏–π offer:", offer);
        } catch (error) {
          console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ offer:", error);
        }
      };

      sendOffer();

      peerConnection.current.ontrack = (event) => {
        if (event.streams && event.streams[0] && videoRef.current) {
          videoRef.current.srcObject = event.streams[0];
        } else {
          console.warn("‚ùó –ü–æ—Ç—ñ–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π");
        }
      };

      // –û—á–∏—â–µ–Ω–Ω—è –ø—Ä–∏ –∑–∞–∫—Ä–∏—Ç—Ç—ñ –∑'—î–¥–Ω–∞–Ω–Ω—è
      return () => {
        if (peerConnection.current) {
          peerConnection.current.close();
        }
      };
    }
  }, [socketConnected]); // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ WebRTC —Ç—ñ–ª—å–∫–∏ –ø—ñ—Å–ª—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è WebSocket

  return <video ref={videoRef} autoPlay playsInline />;
};
