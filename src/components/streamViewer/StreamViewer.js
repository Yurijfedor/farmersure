import { useEffect, useRef, useState } from "react";

export const StreamViewer = () => {
  const videoRef = useRef(null);
  const [socketConnected, setSocketConnected] = useState(false);
  const [peerConnection, setPeerConnection] = useState(null);
  const [socket, setSocket] = useState(null);

  useEffect(() => {
    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è WebRTC —ñ WebSocket
    const initializeWebRTC = () => {
      const peerConnection = new RTCPeerConnection({
        iceServers: [{ urls: "stun:stun.l.google.com:19302" }],
      });

      // –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –¥–ª—è iceCandidate
      peerConnection.onicecandidate = (event) => {
        if (event.candidate) {
          console.log("üßä –ù–∞–¥—Å–∏–ª–∞—î–º–æ iceCandidate", event.candidate);
          socket.send(JSON.stringify({ iceCandidate: event.candidate }));
        }
      };

      // –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—ñ–¥–µ–æ –ø–æ—Ç–æ–∫—É
      peerConnection.ontrack = (event) => {
        if (event.streams && event.streams[0] && videoRef.current) {
          videoRef.current.srcObject = event.streams[0];
        } else {
          console.warn("‚ùó –ü–æ—Ç—ñ–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π");
        }
      };

      return peerConnection;
    };

    const socket = new WebSocket(
      `${
        window.location.protocol === "https:" ? "wss" : "ws"
      }://192.168.0.103:8080`
    );

    // –õ–æ–≥—É–≤–∞–Ω–Ω—è WebSocket
    socket.onopen = () => {
      console.log("‚úÖ WebSocket –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ");
      setSocketConnected(true);
    };

    socket.onmessage = async (event) => {
      try {
        const message = JSON.parse(event.data);
        console.log("üì© –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ —Å–µ—Ä–≤–µ—Ä–∞:", message);

        if (message.offer) {
          console.log("üé• –û—Ç—Ä–∏–º–∞–Ω–æ offer:", message.offer);
          await peerConnection.setRemoteDescription(
            new RTCSessionDescription(message.offer)
          );
          const answer = await peerConnection.createAnswer();
          await peerConnection.setLocalDescription(answer);
          socket.send(JSON.stringify({ answer }));
        } else if (message.answer) {
          console.log("üé• –û—Ç—Ä–∏–º–∞–Ω–æ answer:", message.answer);
          await peerConnection.setRemoteDescription(
            new RTCSessionDescription(message.answer)
          );
        } else if (message.iceCandidate) {
          console.log("üßä –û—Ç—Ä–∏–º–∞–Ω–æ iceCandidate:", message.iceCandidate);
          await peerConnection.addIceCandidate(
            new RTCIceCandidate(message.iceCandidate)
          );
        } else {
          console.warn("‚ö†Ô∏è –ù–µ–≤—ñ–¥–æ–º–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:", message);
        }
      } catch (error) {
        console.error(
          "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ —Å–µ—Ä–≤–µ—Ä–∞:",
          error
        );
      }
    };

    socket.onerror = (err) => {
      console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ WebSocket:", err);
    };

    socket.onclose = () => {
      console.log("‚ö†Ô∏è WebSocket –∑'—î–¥–Ω–∞–Ω–Ω—è –∑–∞–∫—Ä–∏—Ç–æ");
      setSocketConnected(false);
    };

    const peerConnectionInstance = initializeWebRTC();
    setPeerConnection(peerConnectionInstance);
    setSocket(socket);

    return () => {
      peerConnectionInstance.close(); // –ó–∞–∫—Ä–∏–≤–∞—î–º–æ peerConnection
      socket.close(); // –ó–∞–∫—Ä–∏–≤–∞—î–º–æ WebSocket
    };
  }, [peerConnection]);

  useEffect(() => {
    if (socketConnected && peerConnection) {
      const sendOffer = async () => {
        try {
          const offer = await peerConnection.createOffer();
          await peerConnection.setLocalDescription(offer);
          socket.send(
            JSON.stringify({ offer: peerConnection.localDescription })
          );
          console.log("üé• –ù–∞–¥—Å–∏–ª–∞—î–º–æ –Ω–æ–≤–∏–π offer:", offer);
        } catch (error) {
          console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ offer:", error);
        }
      };

      // –ù–∞–¥—Å–∏–ª–∞—î–º–æ –Ω–æ–≤–∏–π offer –ø—Ä–∏ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—ñ –∑'—î–¥–Ω–∞–Ω–Ω—è
      sendOffer();
    }
  }, [socketConnected, peerConnection, socket]);

  return <video ref={videoRef} autoPlay playsInline />;
};
