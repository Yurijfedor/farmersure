import { useEffect, useRef, useState } from "react";

export const StreamViewer = () => {
  const videoRef = useRef(null);
  const socket = useRef(null);
  const peerConnection = useRef(null);
  const iceCandidateQueue = useRef([]);
  const [streamReady, setStreamReady] = useState(false);

  const initializePeerConnection = () => {
    if (peerConnection.current) peerConnection.current.close();
    peerConnection.current = new RTCPeerConnection({
      iceServers: [
        { urls: "stun:stun.l.google.com:19302" },
        {
          urls: "turn:openrelay.metered.ca:80",
          username: "openrelayproject",
          credential: "openrelayproject",
        },
      ],
    });

    peerConnection.current.ontrack = (event) => {
      console.log("‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ—Ç—ñ–∫:", event.streams);
      if (event.streams && event.streams[0] && videoRef.current) {
        console.log("–ü—Ä–∏–≤‚Äô—è–∑—É—î–º–æ –ø–æ—Ç—ñ–∫ –¥–æ videoRef:", videoRef.current);
        videoRef.current.srcObject = event.streams[0];
        setStreamReady(true);
        playVideo();
        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ —Ç—Ä–µ–∫—ñ–≤
        event.streams[0].getTracks().forEach((track) => {
          console.log(
            `–¢—Ä–µ–∫ ${track.kind}: enabled=${track.enabled}, readyState=${track.readyState}`
          );
        });
      }
    };

    peerConnection.current.onicecandidate = (event) => {
      if (event.candidate && socket.current?.readyState === WebSocket.OPEN) {
        socket.current.send(
          JSON.stringify({
            iceCandidate: event.candidate,
            viewerId: socket.current.viewerId,
          })
        );
        console.log("üßä –ù–∞–¥—Å–∏–ª–∞—î–º–æ ICE candidate:", event.candidate);
      }
    };

    peerConnection.current.oniceconnectionstatechange = () => {
      console.log(
        "üßä ICE Connection State:",
        peerConnection.current.iceConnectionState
      );
      if (
        peerConnection.current.iceConnectionState === "disconnected" ||
        peerConnection.current.iceConnectionState === "failed"
      ) {
        console.warn("‚ö†Ô∏è –ó‚Äô—î–¥–Ω–∞–Ω–Ω—è —Ä–æ–∑—ñ—Ä–≤–∞–Ω–æ, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫");
        setStreamReady(false);
        initializePeerConnection();
      }
    };
  };

  const processIceCandidates = async () => {
    while (iceCandidateQueue.current.length) {
      const candidate = iceCandidateQueue.current.shift();
      try {
        await peerConnection.current.addIceCandidate(
          new RTCIceCandidate(candidate)
        );
        console.log("üßä –î–æ–¥–∞–Ω–æ ICE candidate –∑ —á–µ—Ä–≥–∏:", candidate);
      } catch (error) {
        console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ ICE candidate:", error);
      }
    }
  };

  const playVideo = () => {
    if (!videoRef.current) {
      console.error("‚ùå videoRef –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π");
      return;
    }
    console.log(
      "–°–ø—Ä–æ–±–∞ –≤—ñ–¥—Ç–≤–æ—Ä–∏—Ç–∏ –≤—ñ–¥–µ–æ, srcObject:",
      videoRef.current.srcObject
    );
    if (videoRef.current.srcObject) {
      videoRef.current
        .play()
        .then(() => {
          console.log("‚ñ∂Ô∏è –í—ñ–¥–µ–æ –≤—ñ–¥—Ç–≤–æ—Ä—é—î—Ç—å—Å—è");
          // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞–Ω—É –≤—ñ–¥–µ–æ
          console.log("–°—Ç–∞–Ω –≤—ñ–¥–µ–æ:", {
            paused: videoRef.current.paused,
            ended: videoRef.current.ended,
            readyState: videoRef.current.readyState,
            networkState: videoRef.current.networkState,
          });
        })
        .catch((e) => {
          console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è:", e);
          if (e.name === "NotAllowedError") {
            console.warn("‚ö†Ô∏è –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å 'Play Video'.");
          }
        });
    } else {
      console.warn("‚ö†Ô∏è –ù–µ–º–∞—î –ø–æ—Ç–æ–∫—É –¥–ª—è –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è");
    }
  };

  const connectWebSocket = () => {
    socket.current = new WebSocket("wss://3f69-91-218-88-220.ngrok-free.app");

    socket.current.onopen = () => {
      console.log("‚úÖ WebSocket –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ");
      socket.current.send(JSON.stringify({ role: "viewer" }));
      initializePeerConnection();
    };

    socket.current.onmessage = async (event) => {
      try {
        const message = JSON.parse(event.data);
        console.log("üì© –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ —Å–µ—Ä–≤–µ—Ä–∞:", message);

        if (message.offer) {
          console.log("üé• –û—Ç—Ä–∏–º–∞–Ω–æ offer:", message.offer);
          const signalingState = peerConnection.current.signalingState;
          console.log("–¢–µ–∫—É—â–∏–π —Å—Ç–∞–Ω:", signalingState);

          if (signalingState === "stable" && streamReady) {
            console.log(
              "‚ö†Ô∏è –ó‚Äô—î–¥–Ω–∞–Ω–Ω—è –≤–∂–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, —ñ–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–≤—Ç–æ—Ä–Ω–∏–π offer"
            );
            return;
          }

          if (signalingState !== "stable") {
            console.warn("‚ö†Ô∏è –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∑‚Äô—î–¥–Ω–∞–Ω–Ω—è —á–µ—Ä–µ–∑ –Ω–æ–≤–∏–π offer");
            initializePeerConnection();
          }

          await peerConnection.current.setRemoteDescription(
            new RTCSessionDescription(message.offer)
          );
          console.log("‚úÖ RemoteDescription –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ");

          const answer = await peerConnection.current.createAnswer();
          await peerConnection.current.setLocalDescription(answer);
          if (socket.current?.readyState === WebSocket.OPEN) {
            socket.current.send(
              JSON.stringify({ answer, viewerId: socket.current.viewerId })
            );
            console.log("‚úÖ Answer –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ:", answer);
          }
          await processIceCandidates();
        } else if (message.iceCandidate) {
          console.log("üßä –û—Ç—Ä–∏–º–∞–Ω–æ iceCandidate:", message.iceCandidate);
          if (peerConnection.current.remoteDescription) {
            await peerConnection.current.addIceCandidate(
              new RTCIceCandidate(message.iceCandidate)
            );
            console.log("üßä –î–æ–¥–∞–Ω–æ ICE candidate:", message.iceCandidate);
          } else {
            iceCandidateQueue.current.push(message.iceCandidate);
            console.log(
              "üßä ICE candidate –¥–æ–¥–∞–Ω–æ –≤ —á–µ—Ä–≥—É:",
              message.iceCandidate
            );
          }
        }
      } catch (error) {
        console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:", error);
      }
    };

    socket.current.onerror = (err) => {
      console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ WebSocket:", err);
      setTimeout(connectWebSocket, 2000);
    };

    socket.current.onclose = () => {
      console.log("‚ö†Ô∏è WebSocket –∑–∞–∫—Ä–∏—Ç–æ");
      setTimeout(connectWebSocket, 2000);
    };
  };

  useEffect(() => {
    connectWebSocket();
    return () => {
      if (socket.current) socket.current.close();
      if (peerConnection.current) peerConnection.current.close();
    };
  }, []);

  const handlePlay = () => {
    playVideo();
  };

  const handleRestart = () => {
    if (socket.current && socket.current.readyState === WebSocket.OPEN) {
      socket.current.send(JSON.stringify({ restart: true }));
      console.log("üîÑ –ù–∞–¥—ñ—Å–ª–∞–Ω–æ –∫–æ–º–∞–Ω–¥—É –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É broadcaster'—É");
    }
    if (peerConnection.current) peerConnection.current.close();
    initializePeerConnection();
    setStreamReady(false);
  };

  return (
    <div style={{ textAlign: "center" }}>
      <video
        ref={videoRef}
        playsInline
        muted
        style={{ width: "640px", height: "480px", border: "1px solid black" }}
      />
      <br />
      <button onClick={handlePlay} disabled={!streamReady}>
        Play Video
      </button>
      <button onClick={handleRestart}>Restart Stream</button>
      {!streamReady && <p>–û—á—ñ–∫—É–≤–∞–Ω–Ω—è –ø–æ—Ç–æ–∫—É...</p>}
      {streamReady && (
        <p>
          –ü–æ—Ç—ñ–∫ –≥–æ—Ç–æ–≤–∏–π. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å "Play Video", —è–∫—â–æ –≤—ñ–¥–µ–æ –Ω–µ –≤—ñ–¥—Ç–≤–æ—Ä—é—î—Ç—å—Å—è.
        </p>
      )}
    </div>
  );
};
